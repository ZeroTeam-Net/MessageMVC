<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agebull.Common.Extend</name>
    </assembly>
    <members>
        <member name="T:System.Linq.EnumerableHelper">
            <summary>
              集合的扩展
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableHelper.SafeAdd``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
              安全加入(如已存在则改名加入)
            </summary>
            <param name="dictionary"> 集合本身 </param>
            <param name="k"> 格式化代码 </param>
            <param name="v"> 值 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddFormat(System.Collections.Generic.IList{System.String},System.String,System.Object[])">
            <summary>
              加入格式化文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fmt"> 格式化代码 </param>
            <param name="args"> 格式化参数 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ParseToList``1(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,``0})">
            <summary>
              从 System.Collections.Generic.IEnumerable到List(并做到不为空和使用原来的对象)
            </summary>
            <param name="source"> </param>
            <param name="parse"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString(System.Collections.IEnumerable)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString(System.Collections.IEnumerable,System.Char)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="sp"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.StrLenght(System.String)">
            <summary>
            文字长度
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToSql(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="lt"> </param>
            <param name="rt"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToSql(System.Collections.Generic.IEnumerable{System.String},System.String,System.Char,System.Int32)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="sp"> </param>
            <param name="maxCol"> </param>
            <param name="empty"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString``1(System.Collections.Generic.List{``0},System.Char)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="sp"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.SelectFormat``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
              转换到文本列表
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="wh"> 条件 </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.SelectFormat``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              转换到文本列表
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.SelectFormat``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,System.Boolean},System.String)">
            <summary>
              转换到文本列表
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="valueFunc"> 取值的方法 </param>
            <param name="wh"> 条件 </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.SelectFormat``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
              转换到文本列表
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="valueFunc"> 取值的方法 </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddRangeFormat``1(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
              加入格式化文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="valueFunc"> 取值的方法 </param>
            <param name="friend"> 要加入的集合 </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddRangeFormat``1(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,System.Boolean},System.String)">
            <summary>
              加入一批格式化文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="friend"> 要加入的集合 </param>
            <param name="wh"> 条件 </param>
            <param name="valueFunc"> 取值的方法 </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddRangeFormat``1(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              加入格式化文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="friend"> 要加入的集合 </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddRangeFormat``1(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
              加入格式化文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="friend"> 要加入的集合 </param>
            <param name="wh"> </param>
            <param name="fm"> 格式化代码(有且只能有{0}) </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddByNotNull(System.Collections.Generic.List{System.String},System.String)">
            <summary>
              连接到文本(null和空白不加入且会消除空白)
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.DistinctBy(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
              得到唯一文件列表
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="empty">空文本 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="sp"> </param>
            <param name="spToHead"></param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.Link(System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
              连接到文本(无值返回空)
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="toString"> </param>
            <param name="sp"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString2``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="toString"> </param>
            <param name="sp"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="toString"> </param>
            <param name="sp"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ListToString(System.Collections.IEnumerable,System.String,System.String,System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fmString"> 格式化的文本 </param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ListToString(System.Collections.IEnumerable,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="sp"> 中间的连接字串 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ListToString(System.Collections.IEnumerable,System.Func{System.Object,System.String},System.String,System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fmt"> 格式化方法</param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkByFormat2``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fmt"> 格式方法 </param>
            <param name="empty"> 为空时显示 </param>
            <param name="sp"> 中间的连接字串 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkByFormat``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fmt"> 格式方法 </param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkByFormat``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fmt"> 格式方法 </param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToSql(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              连接到SQL文本
            </summary>
            <param name="em"> 集合本身 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkToString(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.LinkByFormat2(System.Collections.IEnumerable,System.String,System.String,System.String,System.String)">
            <summary>
              连接到文本
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="fmString"> 格式化的文本 </param>
            <param name="head"> 前缀 </param>
            <param name="sp"> 中间的连接字串 </param>
            <param name="food"> 后缀 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            向ObservableCollection加入一批数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="range"></param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddOnce``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            不重复加入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="range"></param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddOnce``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            不重复加入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="range"></param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ToList2``1(System.Collections.IEnumerable)">
            <summary>
              从 System.Collections.Generic.IEnumerable到List(并做到不为空和使用原来的对象)
            </summary>
            <param name="source"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ToObservableCollection``1(System.Collections.IEnumerable)">
            <summary>
              从 System.Collections.Generic.IEnumerable到List(并做到不为空和使用原来的对象)
            </summary>
            <param name="source"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.Select2``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
              从 System.Collections.Generic.IEnumerable到List(并做到不为空和使用原来的对象)
            </summary>
            <param name="source"> </param>
            <param name="convert"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.Select3``2(System.Collections.IEnumerable,System.Func{``1,``0})">
            <summary>
              从 System.Collections.Generic.IEnumerable到List(并做到不为空和使用原来的对象)
            </summary>
            <param name="source"> </param>
            <param name="convert"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ForEach(System.Collections.IEnumerable,System.Action{System.Object},System.Boolean)">
            <summary>
              遍历
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="action"> 化方法</param>
            <param name="keepNull"> 跳过空值 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.Foreach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)">
            <summary>
              遍历
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="action"> 化方法</param>
            <param name="keepNull"> 跳过空值 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.ToList``1(System.Collections.IEnumerable,System.Func{System.Object,``0},System.Boolean)">
            <summary>
              到列表
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="action"> 化方法</param>
            <param name="keepNull"> 跳过空值 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.Foreach``2(System.Collections.Generic.IEnumerable{``1},System.Func{System.Object,``0},System.Boolean)">
            <summary>
              遍历
            </summary>
            <param name="em"> 集合本身 </param>
            <param name="action"> 化方法</param>
            <param name="keepNull"> 跳过空值 </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddOnce(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
                如果数组中没有相同的,就增加它
            </summary>
            <param name="em"></param>
            <param name="value">内容</param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddOnce``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
                如果字典中没有就增加它
            </summary>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="value">内容</param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.AddOrSwitch``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
                如果字典中没有就增加它,有就替换它
            </summary>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="value">内容</param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.OnlyAdd``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
                如果字典中没有就增加它
            </summary>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="value">内容</param>
        </member>
        <member name="M:System.Linq.EnumerableHelper.Merge``1(System.Collections.Generic.Dictionary{System.String,``0}[])">
            <summary>
                合并(后一个如果有和前一个同键的,会覆盖它)
            </summary>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableHelper.Splice(System.String,System.String,System.Object[])">
            <summary>
            拼接文本
            </summary>
            <param name="head">起头文本</param>
            <param name="splice">连接的中间文本</param>
            <param name="args">被连接的内容(如果为空,不拼接)</param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.FixStack`1">
            <summary>
              表示一个栈底为固定值的栈
            </summary>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:System.Linq.FixStack`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:System.Linq.FixStack`1.Clear">
            <summary>
            清栈
            </summary>
        </member>
        <member name="P:System.Linq.FixStack`1.StackCount">
            <summary>
            栈深
            </summary>
        </member>
        <member name="P:System.Linq.FixStack`1.Stack">
            <summary>
            栈内值
            </summary>
        </member>
        <member name="P:System.Linq.FixStack`1.Current">
            <summary>
              当前
            </summary>
        </member>
        <member name="P:System.Linq.FixStack`1.IsEmpty">
            <summary>
             栈是否为空
            </summary>
        </member>
        <member name="P:System.Linq.FixStack`1.FixValue">
            <summary>
              固定
            </summary>
        </member>
        <member name="P:System.Linq.FixStack`1.FixStackBottom">
            <summary>
              栈底为固定值,即保证最后栈中总有一个值
            </summary>
            <remarks>
              当调用了SetDefault后为真
            </remarks>
        </member>
        <member name="M:System.Linq.FixStack`1.op_Implicit(System.Linq.FixStack{`0})~`0">
            <summary>
              自动转换
            </summary>
            <param name="stack"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.FixStack`1.SetFix(`0)">
            <summary>
              配置固定值(只第一次调用有效果)
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:System.Linq.FixStack`1.SetFixAndReplaceAll(`0)">
            <summary>
            设置配置固定值(只第一次调用有效果)并将栈内所有值替换为它
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:System.Linq.FixStack`1.Push(`0)">
            <summary>
              入栈
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:System.Linq.FixStack`1.PushNull">
            <summary>
             空入栈
            </summary>
        </member>
        <member name="M:System.Linq.FixStack`1.PushCurrent">
            <summary>
             当前再入栈
            </summary>
            <remarks>目的是和其它人做相同次数的入栈和出栈</remarks>
        </member>
        <member name="M:System.Linq.FixStack`1.Pop">
            <summary>
              出栈
            </summary>
        </member>
        <member name="M:System.Linq.FixStack`1.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:System.Linq.FixStack`1.Refresh">
            <summary>
            直接操作Stack后的更新
            </summary>
        </member>
        <member name="T:System.Linq.FixStack2`1">
            <summary>
              表示一个栈底为固定值的栈
            </summary>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:System.Linq.FixStack2`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:System.Linq.FixStack2`1.Current">
            <summary>
              当前
            </summary>
        </member>
        <member name="P:System.Linq.FixStack2`1.IsEmpty">
            <summary>
             栈是否为空
            </summary>
        </member>
        <member name="P:System.Linq.FixStack2`1.FixValue">
            <summary>
              固定
            </summary>
        </member>
        <member name="P:System.Linq.FixStack2`1.FixStackBottom">
            <summary>
              栈底为固定值,即保证最后栈中总有一个值
            </summary>
            <remarks>
              当调用了SetDefault后为真
            </remarks>
        </member>
        <member name="M:System.Linq.FixStack2`1.op_Implicit(System.Linq.FixStack2{`0})~`0">
            <summary>
              自动转换
            </summary>
            <param name="stack"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Linq.FixStack2`1.SetFix(`0)">
            <summary>
              配置固定值(只第一次调用有效果)
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:System.Linq.FixStack2`1.Push(`0)">
            <summary>
              入栈
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:System.Linq.FixStack2`1.PushCurrent">
            <summary>
             当前再入栈
            </summary>
            <remarks>目的是和其它人做相同次数的入栈和出栈</remarks>
        </member>
        <member name="M:System.Linq.FixStack2`1.Clear">
            <summary>
            清栈
            </summary>
        </member>
        <member name="P:System.Linq.FixStack2`1.StackCount">
            <summary>
            栈深
            </summary>
        </member>
        <member name="M:System.Linq.FixStack2`1.Pop">
            <summary>
              出栈
            </summary>
        </member>
        <member name="T:System.UnixTimeConvert">
            <summary>
            Unix时间互转
            </summary>
        </member>
        <member name="M:System.UnixTimeConvert.ToDateTime(System.Int32)">
            <summary>
            将Unix时间戳转换为DateTime类型时间
            </summary>
            <param name="unix">double 型数字</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:System.UnixTimeConvert.ToTimestamp(System.DateTime)">
            <summary>
            将c# DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time">时间</param>
            <returns>long</returns>
        </member>
        <member name="T:System.EnumExtend">
            <summary>
            枚举静态扩展
            </summary>
        </member>
        <member name="M:System.EnumExtend.Equals(System.Enum,System.Enum[])">
            <summary>
              包括枚举的全部值吗
            </summary>
            <param name="source"> </param>
            <param name="values"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.EnumExtend.EqualsSome(System.Enum,System.Enum[])">
            <summary>
              包括枚举的全部值吗
            </summary>
            <param name="source"> </param>
            <param name="values"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.EnumExtend.HasFlags(System.Enum,System.Enum[])">
            <summary>
              包括枚举的全部值吗
            </summary>
            <param name="source"> </param>
            <param name="values"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.EnumExtend.HasSomeFlags(System.Enum,System.Enum[])">
            <summary>
              包含枚举的一或多个值吗
            </summary>
            <param name="source"> </param>
            <param name="values"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.EnumExtend.AnyFlags(System.Enum,System.Enum[])">
            <summary>
              包含枚举的一或多个值
            </summary>
            <param name="source"> </param>
            <param name="values"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.ReflectionExtend">
            <summary>
              表示一个字段的重要程度与分类扩展属性
            </summary>
        </member>
        <member name="M:System.ReflectionExtend.GetFieldDescription(System.Type,System.String)">
            <summary>
              找到一个字段的显示文字
            </summary>
        </member>
        <member name="M:System.ReflectionExtend.GetPropertyDescription(System.Type,System.String)">
            <summary>
              找到一个字段的显示文字
            </summary>
        </member>
        <member name="M:System.ReflectionExtend.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            得到一个类型中的SupperPropert特性
            </summary>
            <param name="field">字段</param>
            <returns>找到则返回对象的SupperPropert特性,一个默认的对象</returns>
        </member>
        <member name="M:System.ReflectionExtend.CreateObject(System.Type)">
            <summary>
              生成一个类型的实例
            </summary>
            <param name="type"> 类型 </param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:System.ReflectionExtend.HaseFun(System.Type,System.String)">
            <summary>
            有否方法
            </summary>
            <param name="type"> 类型 </param>
            <param name="fun"></param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:System.ReflectionExtend.TryParse``1(System.Type,System.Object)">
            <summary>
            从文本构造(调用TryParse)
            </summary>
            <param name="type"> 类型 </param>
            <param name="value"></param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:System.ReflectionExtend.Generate(System.Type)">
            <summary>
              生成一个类型的实例
            </summary>
            <param name="type"> 类型 </param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:System.ReflectionExtend.Generate``1(System.Type)">
            <summary>
              生成一个类型的实例
            </summary>
            <param name="type"> 类型 </param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:System.ReflectionExtend.HaseMethod(System.Type,System.String)">
            <summary>
            包括指定方法吗
            </summary>
            <param name="type"></param>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:System.ReflectionExtend.GetGenericParameter(System.Type)">
            <summary>
            得到泛型参数
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.ReflectionExtend.HaseAttribute(System.Type,System.Type)">
            <summary>
            得到一个类型是否有对   民性属应对错
            </summary>
            <param name="type">类型</param>
            <param name="attribute">属性对象 </param>
            <returns>找到则返回对象的SupperPropert特性,一个默认的对象</returns>
        </member>
        <member name="M:System.ReflectionExtend.IsBaseType(System.Type)">
            <summary>
            是否基本类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:System.ReflectionExtend.BaseTypes">
            <summary>
            所有基础类型
            </summary>
        </member>
        <member name="M:System.ReflectionExtend.IsSupperInterface(System.Type,System.Type)">
            <summary>
            确定类型是否实现或继承指定接口
            </summary>
            <param name="type">要确定的类型</param>
            <param name="faces">实现或继承的接口</param>
            <returns>true表达实现了这个接口</returns>
        </member>
        <member name="M:System.ReflectionExtend.GetAttribute``1(System.Type)">
            <summary>
            得到数据类型的接口
            </summary>
            <param name="type">要确定的类型</param>
            <returns>true表达实现了这个接口</returns>
        </member>
        <member name="M:System.ReflectionExtend.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            得到数据类型的接口
            </summary>
            <param name="field">要确定的类型</param>
            <returns>true表达实现了这个接口</returns>
        </member>
        <member name="M:System.ReflectionExtend.GetAttribute2``1(System.Reflection.MemberInfo)">
            <summary>
            得到数据类型的接口
            </summary>
            <param name="field">要确定的类型</param>
            <returns>true表达实现了这个接口</returns>
        </member>
        <member name="T:System.TypeExtend">
            <summary>
            类型扩展
            </summary>
        </member>
        <member name="M:System.TypeExtend.GetTypeName(System.Object)">
            <summary>
              得到对象的可读类型名字
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.TypeExtend.GetFullTypeName(System.Type)">
            <summary>
                得到类型的可读名字
            </summary>
            <param name="type"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.TypeExtend.GetTypeNameSpace(System.Object)">
            <summary>
              得到对象的可读类型名字
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.TypeExtend.GetName(System.Linq.Expressions.Expression{System.Delegate})">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetName(System.Linq.Expressions.MemberExpression)">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetFunc``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetFunc``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetValue(System.Linq.Expressions.Expression)">
            <summary>
                取得值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeExtend.CreateFunc``2(System.Reflection.TypeInfo,System.String,System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            生成动态匿名调用内部方法（参数由TArg转为实际类型后调用，并将调用返回值转为TRes）
            </summary>
            <typeparam name="TArg">参数类型（接口）</typeparam>
            <typeparam name="TRes">返回值类型（接口）</typeparam>
            <param name="callInfo">调用对象类型</param>
            <param name="argInfo">原始参数类型</param>
            <param name="resInfo">原始返回值类型</param>
            <param name="methodName">原始调用方法</param>
            <returns>匿名委托</returns>
        </member>
        <member name="M:System.TypeExtend.CreateFunc``1(System.Reflection.TypeInfo,System.String,System.Reflection.TypeInfo)">
            <summary>
            生成动态匿名调用内部方法（无参，调用返回值转为TRes）
            </summary>
            <typeparam name="TRes">返回值类型（接口）</typeparam>
            <param name="callInfo">调用对象类型</param>
            <param name="resInfo">原始返回值类型</param>
            <param name="methodName">原始调用方法</param>
            <returns>匿名委托</returns>
        </member>
        <member name="T:System.Threading.ManualResetEventSlimScope">
            <summary>
            互斥锁范围
            </summary>
        </member>
        <member name="F:System.Threading.ManualResetEventSlimScope.mutex">
            <summary>
            锁定对象
            </summary>
        </member>
        <member name="M:System.Threading.ManualResetEventSlimScope.Scope(System.Threading.ManualResetEventSlim)">
            <summary>
            构造
            </summary>
            <param name="m">要锁定的一或多个对象</param>
        </member>
        <member name="M:System.Threading.ManualResetEventSlimScope.#ctor(System.Threading.ManualResetEventSlim)">
            <summary>
            构造
            </summary>
            <param name="m">要锁定的一或多个对象</param>
        </member>
        <member name="M:System.Threading.ManualResetEventSlimScope.OnDispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="T:System.Text.ChineseMoneyHelper">
            <summary>
              中文金额 该类重载的 ToString() 方法返回的是大写金额字符串
            </summary>
        </member>
        <member name="M:System.Text.ChineseMoneyHelper.ToChineseMoney(System.Decimal)">
            <summary>
              构造函数
            </summary>
            <param name="money"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChineseMoneyHelper.ToPrintChineseMoney(System.Decimal)">
            <summary>
              构造函数
            </summary>
            <param name="money"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChineseMoneyHelper.ToChineseNumber(System.Int32)">
            <summary>
              构造函数
            </summary>
            <param name="money"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.Text.ChineseNumber">
            <summary>
              中文金额 该类重载的 ToString() 方法返回的是大写金额字符串
            </summary>
        </member>
        <member name="M:System.Text.ChineseNumber.NumberString(System.Int32)">
            <summary>
              构造函数
            </summary>
            <param name="number"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.Text.ChineseMoney">
            <summary>
              中文金额 该类重载的 ToString() 方法返回的是大写金额字符串
            </summary>
        </member>
        <member name="M:System.Text.ChineseMoney.InvoiceString(System.Decimal)">
            <summary>
              构造函数
            </summary>
            <param name="money"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChineseMoney.InvoicePrintString(System.Decimal)">
            <summary>
              转换为套打用的文本
            </summary>
            <param name="money"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.Text.ChinessPinYin">
            <summary>
              拼音的操作类
            </summary>
        </member>
        <member name="M:System.Text.ChinessPinYin.Head(System.String)">
            <summary>
              取得文字的头一个拼音
            </summary>
            <param name="chinese"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChinessPinYin.ConvertToPinYin(System.String)">
            <summary>
              得到文字的拼音
            </summary>
            <param name="chinese"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChinessPinYin.PinYin(System.String)">
            <summary>
              得到文字的拼音
            </summary>
            <param name="chinese"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChinessPinYin.ConvertToShengMu(System.String)">
            <summary>
              得到文字每个字的拼音的第一个
            </summary>
            <param name="chinese"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChinessPinYin.ToField(System.String)">
            <summary>
              将字符串转为字母表示(中文用声母,其它不变)
            </summary>
            <param name="s"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChinessPinYin.ToAsciiField(System.String)">
            <summary>
              将字符串转为字母表示(中文用声母,其它不变)
            </summary>
            <param name="s"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.ChinessPinYin.ShengMu(System.String)">
            <summary>
              得到文字每个字的拼音的第一个
            </summary>
            <param name="chinese"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.Text.UnicodeBase64">
            <summary>
              unicodeBase64编，解码
            </summary>
        </member>
        <member name="M:System.Text.UnicodeBase64.EncodeToBase64(System.String)">
            <summary>
              得到文字每个字的拼音的第一个
            </summary>
            <param name="code"> </param>
            <returns> 返回编码的值($SG$) </returns>
        </member>
        <member name="M:System.Text.UnicodeBase64.EncodeBase64(System.String)">
            <summary>
              对文本进行Base64编码 使用unicode编码
            </summary>
            <param name="code"> 要编码的文本 </param>
            <returns> 编码后的文本 </returns>
        </member>
        <member name="M:System.Text.UnicodeBase64.DecodeFromBase64(System.String)">
            <summary>
              对文本进行Base64解码
            </summary>
            <param name="code"> </param>
            <returns> 返回编码的值($SG$) </returns>
        </member>
        <member name="M:System.Text.UnicodeBase64.DecodeBase64(System.String)">
            <summary>
              对文本进行Base64解码 使用unicode编码
            </summary>
            <param name="code"> 要解码的文本 </param>
            <returns> 解码后的文本 </returns>
        </member>
        <member name="T:System.Text.QuanJiaoChinese">
            <summary>
              全角中文的操作类
            </summary>
        </member>
        <member name="M:System.Text.QuanJiaoChinese.IsBjChar(System.Char)">
            <summary>
              是否半角文字 判断字符是否英文半角字符或标点 32 空格 33-47 标点 48-57 0~9 58-64 标点 65-90 A~Z 91-96 标点 97-122 a~z 123-126 标点
            </summary>
            <param name="c"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.QuanJiaoChinese.IsQjChar(System.Char)">
            <summary>
              判断字符是否全角字符或标点 全角字符 - 65248 = 半角字符 全角空格例外
            </summary>
            <param name="c"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.QuanJiaoChinese.ConverToAscii(System.String)">
            <summary>
              将字符串中的全角字符转换为半角
            </summary>
            <param name="s"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.QuanJiaoChinese.ToBj(System.String)">
            <summary>
              将字符串中的全角字符转换为半角
            </summary>
            <param name="s"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.Text.StringHelper">
            <summary>
              文本帮助类
            </summary>
        </member>
        <member name="M:System.Text.StringHelper.SpliteWord(System.String)">
            <summary>
            拆分到单词(每个标点或大写字母作为分隔符)
            </summary>
            <param name="word">单词</param>
            <returns>复数形式</returns>
        </member>
        <member name="M:System.Text.StringHelper.ToName(System.String,System.Boolean)">
            <summary>
            一个字符器转为名称
            </summary>
            <param name="word">单词</param>
            <param name="toFirstUpper">是否首字母大写</param>
            <returns>字符器</returns>
        </member>
        <member name="M:System.Text.StringHelper.ToPluralism(System.String)">
            <summary>
            到一个单词的复数形式
            </summary>
            <param name="word">单词</param>
            <returns>复数形式</returns>
        </member>
        <member name="M:System.Text.StringHelper.ToPluralismInner(System.String)">
            <summary>
            到一个单词的复数形式
            </summary>
            <param name="word">单词</param>
            <returns>复数形式</returns>
        </member>
        <member name="M:System.Text.StringHelper.ToWord(System.String)">
            <summary>
              到首字母大写的文本
            </summary>
            <param name="word"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper.ToWord2(System.String)">
            <summary>
              到首字母小写的文本
            </summary>
            <param name="word"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper.ToUpper(System.Char)">
            <summary>
              将字母转为大写
            </summary>
            <param name="c"> 字母 </param>
            <returns> 转换后的字母 </returns>
        </member>
        <member name="M:System.Text.StringHelper.ToLower(System.Char)">
            <summary>
              将字母转为小写
            </summary>
            <param name="c"> 字母 </param>
            <returns> 转换后的字母 </returns>
        </member>
        <member name="M:System.Text.StringHelper.ListToString(System.Collections.IEnumerable,System.Char)">
            <summary>
              列表转为以一个字符分隔的文本
            </summary>
            <param name="ls"> 列表 </param>
            <param name="dot"> 分隔符 </param>
            <returns> 文本 </returns>
        </member>
        <member name="M:System.Text.StringHelper.ToString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              列表转为以一个字符分隔的文本
            </summary>
            <param name="ls"> 列表 </param>
            <returns> 文本 </returns>
        </member>
        <member name="M:System.Text.StringHelper.FromString(System.String)">
            <summary>
              列表转为以一个字符分隔的文本
            </summary>
            <param name="value"> 列表 </param>
            <returns> 文本 </returns>
        </member>
        <member name="T:System.Text.StringHelper2">
            <summary>
              文本帮助类(String类扩展)
            </summary>
        </member>
        <member name="M:System.Text.StringHelper2.MulitReplace(System.String,System.String[])">
            <summary>
            替换多个内容对
            </summary>
            <param name="str"></param>
            <param name="rs">成对的替换,请保证是成对的</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringHelper2.MulitReplace2(System.String,System.String,System.String[])">
            <summary>
            替换多个内容为一个
            </summary>
            <param name="str"></param>
            <param name="last">替换到</param>
            <param name="org">被替换</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringHelper2.MulitReplace(System.String,System.Char[])">
            <summary>
            替换多个内容对
            </summary>
            <param name="str"></param>
            <param name="rs">成对的替换,请保证是成对的</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringHelper2.MulitReplace2(System.String,System.Char,System.Char[])">
            <summary>
            替换多个内容为一个
            </summary>
            <param name="str"></param>
            <param name="last">替换到</param>
            <param name="org">被替换</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceText(System.Text.StringBuilder,System.Int32,System.String,System.Boolean)">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="str"></param>
            <param name="newLine"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpace(System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="newLine"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceTextFormat(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Text.StringHelper2.SpaceString(System.Int32)">
            <summary>
            得到相应长度的空文本
            </summary>
            <param name="len"></param>
        </member>
        <member name="M:System.Text.StringHelper2.XamlString(System.Boolean)">
            <summary>
            得到布尔用于XAML的文字
            </summary>
            <param name="bl"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendAttrib(System.Text.StringBuilder,System.String,System.Object)">
            <summary>
            加入XML属性
            </summary>
            <param name="code"></param>
            <param name="name">属性</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendAttrib(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            加入XML属性
            </summary>
            <param name="code"></param>
            <param name="name">属性</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendAttrib(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            加入XML属性
            </summary>
            <param name="code"></param>
            <param name="name">属性</param>
            <param name="head"></param>
            <param name="value">值</param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceTextFormat(System.Text.StringBuilder,System.Boolean,System.Int32,System.String,System.Object[])">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="newLine"></param>
            <param name="space"></param>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceLineText(System.Text.StringBuilder,System.Int32,System.String,System.Boolean)">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="str"></param>
            <param name="newLine"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendUsing(System.Text.StringBuilder,System.String)">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="nameSpace"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendUsing(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            写入using语句
            </summary>
            <param name="code"></param>
            <param name="nameSpaces"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceLineFormat(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceLineFormat(System.Text.StringBuilder,System.Int32,System.Boolean,System.String,System.Object[])">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="newLine"> </param>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceLineText2(System.Text.StringBuilder,System.Int32,System.String,System.Boolean)">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="str"></param>
            <param name="newLine"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceLineFormat2(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Text.StringHelper2.AppendSpaceLineFormat2(System.Text.StringBuilder,System.Int32,System.Boolean,System.String,System.Object[])">
            <summary>
            把空格放有每行前的格式化方式
            </summary>
            <param name="code"></param>
            <param name="space"></param>
            <param name="newLine"> </param>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Text.StringHelper2.SpaceLine2(System.String,System.Int32)">
            <summary>
            使每行都缩进相同个数的空格
            </summary>
            <param name="str"></param>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringHelper2.SpaceLine(System.String,System.Int32,System.Boolean)">
            <summary>
            使每行都缩进相同个数的空格
            </summary>
            <param name="str">原始文本</param>
            <param name="space">空格数量</param>
            <param name="first">是否缩进首行</param>
            <returns>结果文本</returns>
        </member>
        <member name="M:System.Text.StringHelper2.SpaceLine(System.String,System.String,System.Boolean)">
            <summary>
            使每行都缩进相同个数的空格
            </summary>
            <param name="str">原始文本</param>
            <param name="head">头部文字</param>
            <param name="first">是否缩进首行</param>
            <returns>结果文本</returns>
        </member>
        <member name="M:System.Text.StringHelper2.IsNullOrDefault(System.String,System.String)">
            <summary>
              为空或是缺省文本
            </summary>
            <param name="word"> </param>
            <param name="def"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper2.IsName(System.String)">
            <summary>
              检测一个文字是否一个单词
            </summary>
            <param name="text"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper2.ToUWord(System.String)">
            <summary>
              到首字母大写的文本
            </summary>
            <param name="word"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper2.ToLWord(System.String)">
            <summary>
              到首字母小写的文本
            </summary>
            <param name="word"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper2.ToUpper(System.Char)">
            <summary>
              将字母转为大写
            </summary>
            <param name="c"> 字母 </param>
            <returns> 转换后的字母 </returns>
        </member>
        <member name="M:System.Text.StringHelper2.ToLower(System.Char)">
            <summary>
              将字母转为小写
            </summary>
            <param name="c"> 字母 </param>
            <returns> 转换后的字母 </returns>
        </member>
        <member name="M:System.Text.StringHelper2.IsEquals(System.String,System.String)">
            <summary>
              到首字母大写的文本
            </summary>
            <param name="a"> </param>
            <param name="b"></param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper2.GetLen(System.String)">
            <summary>
              取得文本的长度(全角算两个)
            </summary>
            <param name="a"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Text.StringHelper2.Append(System.String,System.String,System.Object[])">
            <summary>
            拼接文本
            </summary>
            <param name="head">起头文本</param>
            <param name="splice">连接的中间文本</param>
            <param name="args">被连接的内容(如果为空,不拼接)</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringHelper2.Append(System.String,System.String,System.Object)">
            <summary>
            拼接文本
            </summary>
            <param name="head">起头文本</param>
            <param name="splice">连接的中间文本</param>
            <param name="arg">被连接的内容(如果为空,不拼接)</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringHelper2.AppendFormat(System.String,System.String,System.String,System.Object[])">
            <summary>
            拼接文本
            </summary>
            <param name="head">起头文本</param>
            <param name="splice">连接的中间文本</param>
            <param name="fmt"></param>
            <param name="arg">被连接的内容(如果为空,不拼接)</param>
            <returns></returns>
        </member>
        <member name="T:System.LunDay">
            <summary>
              LunDay日期转农历 用法说明 直接调用即可,比较简单
            </summary>
        </member>
        <member name="M:System.LunDay.ToLunDay(System.DateTime)">
            <summary>
              转为农历
            </summary>
            <param name="dt"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.LunDay.GetLunarCalendar(System.DateTime)">
            <summary>
              获取对应日期的农历
            </summary>
            <param name="dtDay"> 公历日期 </param>
            <returns> </returns>
        </member>
        <member name="M:System.LunDay.ToLunarCalendar(System.DateTime)">
            <summary>
              获取对应日期的农历
            </summary>
            <param name="dtDay"> 公历日期 </param>
            <returns> </returns>
        </member>
        <member name="T:System.ValueToStringHelper">
            <summary>
            值格式化扩展
            </summary>
        </member>
        <member name="M:System.ValueToStringHelper.XmlTrim(System.String)">
            <summary>
            清理XML使之最短
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.SafeTrim(System.String)">
            <summary>
            安全清除首尾空白
            </summary>
            <param name="str">字符</param>
            <returns>无空白字符串,如全为空白则返回nul</returns>
        </member>
        <member name="M:System.ValueToStringHelper.SafeTrim(System.String,System.Char[])">
            <summary>
            安全清除首尾空白
            </summary>
            <param name="str">字符串</param>
            <param name="chars">首尾清除的字符</param>
            <returns>无空白字符串,如全为空白则返回nul</returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToAsciiBytes(System.String)">
            <summary>
            转为Ascii字节
            </summary>
            <param name="word">单词</param>
            <returns>字节</returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToUtf8Bytes(System.String)">
            <summary>
            转为UTF8字节
            </summary>
            <param name="word">单词</param>
            <returns>字节</returns>
        </member>
        <member name="M:System.ValueToStringHelper.FromAsciBytes(System.Byte[])">
            <summary>
            
            按Ascii字节还原为文本
            </summary>
            <param name="bytes">字节</param>
            <returns>文本</returns>
        </member>
        <member name="M:System.ValueToStringHelper.FromUtf8Bytes(System.Byte[])">
            <summary>
            按Ascii字节还原为文本
            </summary>
            <param name="bytes">字节</param>
            <returns>文本</returns>
        </member>
        <member name="M:System.ValueToStringHelper.SpliteWord(System.String)">
            <summary>
            拆分到单词(每个标点或大写字母作为分隔符)
            </summary>
            <param name="word">单词</param>
            <returns>复数形式</returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToName(System.String,System.Boolean)">
            <summary>
            一个字符器转为名称
            </summary>
            <param name="word">单词</param>
            <param name="toFirstUpper">是否首字母大写</param>
            <returns>字符器</returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToPluralism(System.String)">
            <summary>
            到一个单词的复数形式
            </summary>
            <param name="word">单词</param>
            <returns>复数形式</returns>
        </member>
        <member name="M:System.ValueToStringHelper.IsEquals(System.String,System.String)">
            <summary>
              数据是不是相等
            </summary>
            <param name="a"> </param>
            <param name="b"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToNullString(System.String,System.String)">
            <summary>
            到用空文本替换的文本
            </summary>
            <param name="str"></param>
            <param name="nullString"></param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToPercent(System.Decimal,System.String)">
            <summary>
            到百分比显示
            </summary>
            <param name="d"></param>
            <param name="nullString">为0时表示的文本</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToPercent(System.Decimal)">
            <summary>
            到百分比显示
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToNullString(System.Decimal,System.Int32,System.String)">
            <summary>
            到没有多余小数位的文本
            </summary>
            <param name="d"></param>
            <param name="nullString">为0时表示的文本</param>
            <param name="dia">最长小数位(默认为10)</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToNullString(System.Nullable{System.Decimal},System.Int32,System.String)">
            <summary>
            到没有多余小数位的文本
            </summary>
            <param name="d"></param>
            <param name="nullString">为0时表示的文本</param>
            <param name="dia">最长小数位(默认为10)</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToNullString(System.DateTime,System.String,System.String)">
            <summary>
            到可为空的时间格式化
            </summary>
            <param name="v"></param>
            <param name="fmt">格式化</param>
            <param name="nullString">为0时表示的文本</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToNullString(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            到可为空的时间格式化
            </summary>
            <param name="v"></param>
            <param name="fmt">格式化</param>
            <param name="nullString">为0时表示的文本</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToNullString``1(``0,System.String)">
            <summary>
            到缺省值用空文本表示的值
            </summary>
            <param name="v"></param>
            <param name="nullString">为0时表示的文本</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToNullString``1(System.Nullable{``0},System.String)">
            <summary>
            到没有多余小数位的文本
            </summary>
            <param name="v"></param>
            <param name="nullString">为0时表示的文本</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToFixLenString(System.Decimal,System.Int32,System.Int32)">
            <summary>
            到固定长度显示
            </summary>
            <param name="d">小数</param>
            <param name="len">总长度</param>
            <param name="dit">小数位</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToFixLenString(System.Single,System.Int32,System.Int32)">
            <summary>
            到固定长度显示
            </summary>
            <param name="d">小数</param>
            <param name="len">总长度</param>
            <param name="dit">小数位</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToFixLenString(System.Double,System.Int32,System.Int32)">
            <summary>
            到固定长度显示
            </summary>
            <param name="d">小数</param>
            <param name="len">总长度</param>
            <param name="dit">小数位</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToFixLenString(System.Int32,System.Int32)">
            <summary>
            到固定长度显示
            </summary>
            <param name="d">对象</param>
            <param name="len">总长度</param>
            <returns></returns>
        </member>
        <member name="M:System.ValueToStringHelper.ToFixLenString``1(``0,System.Int32)">
            <summary>
            到固定长度显示
            </summary>
            <param name="d">对象</param>
            <param name="len">总长度</param>
            <returns></returns>
        </member>
        <member name="T:Agebull.Common.MulitToOneQueue`1">
            <inheritdoc />
            <summary>
            多生产者单消费者的同步列表（线程安全）
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <remarks>
            1 内部使用信号量
            2 用于多生产者单消费者的场景
            3 使用双队列，以防止错误时无法还原
            </remarks>
        </member>
        <member name="P:Agebull.Common.MulitToOneQueue`1.Queue">
            <summary>
            内部队列
            </summary>
        </member>
        <member name="P:Agebull.Common.MulitToOneQueue`1.Doing">
            <summary>
            正在处理
            </summary>
        </member>
        <member name="F:Agebull.Common.MulitToOneQueue`1._semaphore">
            <summary>
            用于同步的信号量
            </summary>
        </member>
        <member name="M:Agebull.Common.MulitToOneQueue`1.IsEmpty">
            <summary>
            是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.MulitToOneQueue`1.Push(`0)">
            <summary>
            加入队列
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Agebull.Common.MulitToOneQueue`1.StartProcess(`0@,System.Int32)">
            <summary>
            开始处理队列内容
            </summary>
            <param name="t">返回内容（如果返回True)</param>
            <param name="waitMs">等待时长</param>
        </member>
        <member name="M:Agebull.Common.MulitToOneQueue`1.EndProcess">
            <summary>
            完成处理队列内容
            </summary>
        </member>
        <member name="M:Agebull.Common.MulitToOneQueue`1.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:Agebull.Common.MulitToOneQueue`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Agebull.Common.Configuration.ConfigurationHelper">
            <summary>
              配置文件的帮助类
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.Builder">
            <summary>
            全局配置
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.Root">
            <summary>
            全局配置
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.BasePath">
            <summary>
            基本目录
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.BindBuilder(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            绑定
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.CreateBuilder">
            <summary>
            建造生成器，使用前请调用
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.SyncBuilder">
            <summary>
            建造生成器，使用前请调用
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.IsEnable(System.String,System.Boolean)">
            <summary>
            指定配置是否启用
            </summary>
            <param name="key">配置的键名称，应已约定为bool类型</param>
            <param name="def">不存在时默认值</param>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.IsDisable(System.String,System.Boolean)">
            <summary>
            刷新
            </summary>
            <param name="key">配置的键名称，应已约定为bool类型</param>
            <param name="def">不存在时默认值</param>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Flush">
            <summary>
            刷新
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.SetConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Load(System.String,System.Boolean)">
            <summary>
            载入配置文件
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.RegistOnChange(System.String,System.Action,System.Boolean)">
            <summary>
            注册更新处理器
            </summary>
            <param name="section">节点</param>
            <param name="reload">更新处理方法</param>
            <param name="runNow">是否现在执行一次</param>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.RegistOnChange``1(System.String,System.Action{``0},System.Boolean)">
            <summary>
            注册更新处理器
            </summary>
            <param name="section">节点</param>
            <param name="reload">更新处理方法</param>
            <param name="runNow">是否现在执行一次</param>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Child(System.String)">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.ToConfig``1">
            <summary>
            转为强类型配置
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Child``1(System.String)">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.Item(System.String)">
            <summary>
            取配置
            </summary>
            <param name="key">键</param>
            <returns>配置内容</returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetStr(System.String,System.String)">
            <summary>
              得到文本值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在会回写） </param>
            <returns> 文本值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetInt(System.String,System.Int32)">
            <summary>
              得到长整数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 长整数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetLong(System.String,System.Int64)">
            <summary>
              得到长整数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 长整数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetBool(System.String,System.Boolean)">
            <summary>
              得到布尔值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 布尔值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetDouble(System.String,System.Double)">
            <summary>
              得到双精数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 双精数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetDecimal(System.String,System.Decimal)">
            <summary>
              得到实数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 实数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetDateTime(System.String)">
            <summary>
              得到日期
            </summary>
            <param name="key"> 键 </param>
            <returns> 日期 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetGuid(System.String)">
            <summary>
              得到GUID
            </summary>
            <param name="key"> 键 </param>
            <returns> GUID </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.SetValue``1(System.String,``0)">
            <summary>
              配置一个配置内容
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="key">名称</param>
            <param name="value"> </param>
        </member>
        <member name="F:Agebull.Common.Configuration.ConfigurationHelper._appSettings">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.AppSettings">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="F:Agebull.Common.Configuration.ConfigurationHelper._connectionStrings">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.ConfigurationHelper.ConnectionStrings">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetSection(System.String)">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Get(System.String)">
            <summary>
            显示式设置配置对象(依赖)
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Get``1(System.String)">
            <summary>
            强类型取根节点
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Option``1(System.String)">
            <summary>
            强类型取根节点
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.Option``1(System.String[])">
            <summary>
            强类型取根节点
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetAppSetting(System.String,System.String)">
            <summary>
              得到文本值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 文本值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetAppSettingInt(System.String,System.Int32)">
            <summary>
              得到长整数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 长整数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetAppSettingLong(System.String,System.Int64)">
            <summary>
              得到长整数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 长整数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetAppSettingDouble(System.String,System.Double)">
            <summary>
              得到双精数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 双精数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetAppSettingDecimal(System.String,System.Decimal)">
            <summary>
              得到双精数值
            </summary>
            <param name="key"> 键 </param>
            <param name="def"> 缺省值（不存在或不合理时使用） </param>
            <returns> 双精数值 </returns>
        </member>
        <member name="M:Agebull.Common.Configuration.ConfigurationHelper.GetConnectionString(System.String,System.String)">
            <summary>
              获取连接串的节点信息
            </summary>
            <param name="key">名称</param>
            <param name="def">找不到的缺省值</param>
            <returns> </returns>
        </member>
        <member name="T:Agebull.Common.Configuration.ConfigurationManager">
            <summary>
              配置文件的帮助类
            </summary>
        </member>
        <member name="T:Agebull.Common.Configuration.FromConfigAttribute">
            <summary>
            表示来自配置文件构造的选项对象
            </summary>
        </member>
        <member name="P:Agebull.Common.Configuration.FromConfigAttribute.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="M:Agebull.Common.Configuration.FromConfigAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Agebull.Common.Ioc.DependencyException">
            <summary>
               依赖对象异常
            </summary>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyException.#ctor(System.Type,System.String)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="T:Agebull.Common.Ioc.DependencyHelper">
            <summary>
                简单的依赖注入器(框架内部使用,请不要调用)
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyHelper.ServiceCollection">
            <summary>
                全局依赖
            </summary>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.Binding(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                显示式设置配置对象(依赖)
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.SetRootProvider(System.IServiceProvider)">
            <summary>
                更新构造提供器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.Flush">
            <summary>
                更新(构架内使用)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyHelper.RootProvider">
            <summary>
                依赖注入构造器
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyHelper.ServiceScopeFactory">
            <summary>
                范围工厂
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyHelper.ServiceProvider">
            <summary>
                依赖注入构造器
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyHelper.LoggerFactory">
            <summary>
                全局依赖
            </summary>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.Create``1">
            <summary>
                生成接口实例
            </summary>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.GetService``1">
            <summary>
                生成接口实例
            </summary>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.GetServices``1">
            <summary>
                生成接口实例
            </summary>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddAutoTransient``2">
            <summary>
            注册并使用自动构造
            </summary>
            <typeparam name="TService">基类型</typeparam>
            <typeparam name="TImplementation">实际类型</typeparam>
            <returns>构造后的类型</returns>
            <remarks>
            构造参数构造方式，
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. 其余全部通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            公开属性构造方式
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. FromServicesAttribute通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            </remarks>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddAutoScoped``2">
            <summary>
            注册并使用自动构造
            </summary>
            <typeparam name="TService">基类型</typeparam>
            <typeparam name="TImplementation">实际类型</typeparam>
            <returns>构造后的类型</returns>
            <remarks>
            构造参数构造方式，
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. 其余全部通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            公开属性构造方式
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. FromServicesAttribute通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            </remarks>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddAutoSingleton``2">
            <summary>
            注册并使用动态构造
            </summary>
            <typeparam name="TService">基类型</typeparam>
            <typeparam name="TImplementation">实际类型</typeparam>
            <returns>构造后的类型</returns>
            <remarks>
            构造参数构造方式，
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. 其余全部通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            公开属性构造方式
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. FromServicesAttribute通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            </remarks>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddAutoTransient``1">
            <summary>
            注册并使用自动构造
            </summary>
            <typeparam name="TService">基类型</typeparam>
            <returns>构造后的类型</returns>
            <remarks>
            构造参数构造方式，
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. 其余全部通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            公开属性构造方式
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. FromServicesAttribute通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            </remarks>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddAutoScoped``1">
            <summary>
            注册并使用自动构造
            </summary>
            <typeparam name="TService">类型</typeparam>
            <returns>构造后的类型</returns>
            <remarks>
            构造参数构造方式，
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. 其余全部通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            公开属性构造方式
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. FromServicesAttribute通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            </remarks>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddAutoSingleton``1">
            <summary>
            注册并使用动态构造
            </summary>
            <typeparam name="TService">类型</typeparam>
            <returns>构造后的类型</returns>
            <remarks>
            构造参数构造方式，
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. 其余全部通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            公开属性构造方式
            1. ILogger构造成ILogger&lt;T&gt;
            2. FromConfigAttribute特性标识的构造成从配置文件读取的对象
            3. FromServicesAttribute通过依赖构造（如果无法依赖构造或未注册的，后果未知）
            </remarks>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddTransient(System.Type,System.Type)">
            <summary>
                Adds a transient service of the type specified in <paramref name="serviceType" /> with an
                implementation of the type specified in <paramref name="implementationType" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="implementationType">The implementation type of the service.</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddTransient(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
                Adds a transient service of the type specified in <paramref name="serviceType" /> with a
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddTransient``2">
            <summary>
                Adds a transient service of the type specified in <typeparamref name="TService" /> with an
                implementation type specified in <typeparamref name="TImplementation" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">目标类型</typeparam>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddTransient(System.Type)">
            <summary>
                Adds a transient service of the type specified in <paramref name="serviceType" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddTransient``1">
            <summary>
                Adds a transient service of the type specified in <typeparamref name="TService" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddTransient``1(System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a transient service of the type specified in <typeparamref name="TService" /> with a
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddTransient``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a transient service of the type specified in <typeparamref name="TService" /> with an
                implementation type specified in <typeparamref name="TImplementation" /> using the
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">目标类型</typeparam>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddScoped(System.Type,System.Type)">
            <summary>
                Adds a scoped service of the type specified in <paramref name="serviceType" /> with an
                implementation of the type specified in <paramref name="implementationType" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="implementationType">The implementation type of the service.</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddScoped(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
                Adds a scoped service of the type specified in <paramref name="serviceType" /> with a
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddScoped``2">
            <summary>
                Adds a scoped service of the type specified in <typeparamref name="TService" /> with an
                implementation type specified in <typeparamref name="TImplementation" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">目标类型</typeparam>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddScoped(System.Type)">
            <summary>
                Adds a scoped service of the type specified in <paramref name="serviceType" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddScoped``1">
            <summary>
                Adds a scoped service of the type specified in <typeparamref name="TService" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddScoped``1(System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a scoped service of the type specified in <typeparamref name="TService" /> with a
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddScoped``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a scoped service of the type specified in <typeparamref name="TService" /> with an
                implementation type specified in <typeparamref name="TImplementation" /> using the
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">目标类型</typeparam>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton(System.Type,System.Type)">
            <summary>
                Adds a singleton service of the type specified in <paramref name="serviceType" /> with an
                implementation of the type specified in <paramref name="implementationType" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="implementationType">The implementation type of the service.</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
                Adds a singleton service of the type specified in <paramref name="serviceType" /> with a
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton``2">
            <summary>
                Adds a singleton service of the type specified in <typeparamref name="TService" /> with an
                implementation type specified in <typeparamref name="TImplementation" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">目标类型</typeparam>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton(System.Type)">
            <summary>
                Adds a singleton service of the type specified in <paramref name="serviceType" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton``1">
            <summary>
                Adds a singleton service of the type specified in <typeparamref name="TService" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton``1(System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a singleton service of the type specified in <typeparamref name="TService" /> with a
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton``2(System.Func{System.IServiceProvider,``1})">
            <summary>
                Adds a singleton service of the type specified in <typeparamref name="TService" /> with an
                implementation type specified in <typeparamref name="TImplementation" /> using the
                factory specified in <paramref name="implementationFactory" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">目标类型</typeparam>
            <param name="implementationFactory">工产方法</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton(System.Type,System.Object)">
            <summary>
                Adds a singleton service of the type specified in <paramref name="serviceType" /> with an
                instance specified in <paramref name="implementationInstance" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="serviceType">The type of the service to register.</param>
            <param name="implementationInstance">The instance of the service.</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.AddSingleton``1(``0)">
            <summary>
                Adds a singleton service of the type specified in <typeparamref name="TService" /> with an
                instance specified in <paramref name="implementationInstance" /> to the
                specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="implementationInstance">The instance of the service.</param>
            <returns>IServiceCollection实例</returns>
            <seealso cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyHelper.RemoveService``1">
            <summary>
            删除指定类型构造器
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="T:Agebull.Common.Ioc.DependencyRun">
            <summary>
            IOC范围对象,内部框架使用
            </summary>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyRun.RunScope(System.String,System.Threading.ContextCallback,System.Object)">
            <summary>
            运行在一个依赖范围，析构请调用DependencyRun.DisposeLocal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Ioc.DependencyRun.DisposeLocal">
            <summary>
            析构本地
            </summary>
        </member>
        <member name="F:Agebull.Common.Ioc.DependencyRun.Local">
            <summary>
            活动实例
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyRun.Name">
            <summary>
            范围名称
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyRun.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyRun.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyRun.Dependency">
            <summary>
            附件内容
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyRun.ServiceScope">
            <summary>
            依赖服务范围
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyRun.InnerModel">
            <summary>
            内部模式,框架使用
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.DependencyRun.DisposeFunc">
            <summary>
            析构方法
            </summary>
        </member>
        <member name="T:Agebull.Common.Ioc.DynamicCreateBuilder">
            <summary>
            接口方法生成器
            </summary>
        </member>
        <member name="M:Agebull.Common.Ioc.DynamicCreateBuilder.AutoCreate``1">
            <summary>生成动态匿名调用内部方法（参数由TArg转为实际类型后调用，并将调用返回值转为TRes）</summary>
        </member>
        <member name="T:Agebull.Common.Ioc.FromServicesAttribute">
            <summary>
            表示来自依赖构造的对象
            </summary>
        </member>
        <member name="T:Agebull.Common.Ioc.ScopeData">
            <summary>
            范围数据
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.ScopeData.ServiceScope">
            <summary>
            依赖服务范围
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.ScopeData.Name">
            <summary>
            范围名称
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.ScopeData.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.ScopeData.InnerModel">
            <summary>
            内部模式,框架使用
            </summary>
        </member>
        <member name="P:Agebull.Common.Ioc.ScopeData.Context">
            <summary>
            存储上下文对象,框架使用
            </summary>
        </member>
        <member name="F:Agebull.Common.Ioc.ScopeData.DisposeFunc">
            <summary>
            析构方法
            </summary>
        </member>
        <member name="F:Agebull.Common.Ioc.ScopeData.Dependency">
            <summary>
            附件内容
            </summary>
        </member>
        <member name="M:Agebull.Common.Ioc.ScopeData.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Agebull.Common.ByteHelper">
            <summary>
              对于BYTE型的扩展
            </summary>
        </member>
        <member name="F:Agebull.Common.ByteHelper.EmptyBytes">
            <summary>
            空字节
            </summary>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToBytes(System.String)">
            <summary>
            转为UTF8字节
            </summary>
            <param name="str"></param>
            <returns>字节</returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToByte(System.UInt64)">
            <summary>
              转换为BYTE
            </summary>
            <param name="i"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToByte(System.Int32)">
            <summary>
              转换为BYTE
            </summary>
            <param name="i"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToByte(System.Int16)">
            <summary>
              转换为BYTE
            </summary>
            <param name="i"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToByte(System.UInt16)">
            <summary>
              转换为BYTE
            </summary>
            <param name="number"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToShort(System.Byte[])">
            <summary>
              转换为为数字
            </summary>
            <param name="number"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToUshort(System.Byte[])">
            <summary>
              转换为为数字
            </summary>
            <param name="number"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToInt(System.Byte[])">
            <summary>
              转换为为数字
            </summary>
            <param name="number"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToUshort(System.Byte[],System.Int32)">
            <summary>
              转换为为数字
            </summary>
            <param name="b"> </param>
            <param name="idx"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToInt(System.Byte[],System.Int32)">
            <summary>
              转换为为数字
            </summary>
            <param name="b"> </param>
            <param name="idx"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToByte(System.Int32,System.Byte[],System.Int32)">
            <summary>
              转换为BYTE
            </summary>
            <param name="i"> </param>
            <param name="b"> </param>
            <param name="idx"> </param>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToByte(System.UInt16,System.Byte[],System.Int32)">
            <summary>
              转换为BYTE
            </summary>
            <param name="i"> </param>
            <param name="b"> </param>
            <param name="idx"> </param>
        </member>
        <member name="M:Agebull.Common.ByteHelper.ToNumber(System.Byte[])">
            <summary>
              转换为为数字
            </summary>
            <param name="b"> </param>
            <returns> </returns>
        </member>
        <member name="T:Agebull.Common.Base.TypeHelper">
            <summary>
              实体的帮助类
            </summary>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.FormatDateTime(System.Object,System.String)">
            <summary>
              格式化时间
            </summary>
            <param name="value"> </param>
            <param name="fmt"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.FormatDecimal(System.Object,System.Int32)">
            <summary>
              格式化实数
            </summary>
            <param name="value"> </param>
            <param name="f"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.FormatDecimal(System.Decimal,System.Int32)">
            <summary>
              格式化实数
            </summary>
            <param name="value"> </param>
            <param name="f"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToString(System.String)">
            <summary>
              文本到文本
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToInt64(System.String,System.Int64)">
            <summary>
              文本到long
            </summary>
            <param name="value"> </param>
            <param name="def"></param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToInt32(System.String,System.Int32)">
            <summary>
              文本到int
            </summary>
            <param name="value"> </param>
            <param name="def"></param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToInt16(System.String)">
            <summary>
              文本到short
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToByte(System.String)">
            <summary>
              文本到byte
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToDecimal(System.String)">
            <summary>
              文本到decimal
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToDouble(System.String)">
            <summary>
              文本到double
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToFloat(System.String)">
            <summary>
              文本到float
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToDateTime(System.String)">
            <summary>
              文本到float
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToChar(System.String)">
            <summary>
              文本到char
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToBoolean(System.String)">
            <summary>
              文本到布尔
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToGuid(System.String)">
            <summary>
              文本到
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.NullableString``1(System.Object)">
            <summary>
              可空值到文本
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableInt64(System.String)">
            <summary>
              文本到long
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableInt32(System.String)">
            <summary>
              文本到int
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableInt16(System.String)">
            <summary>
              文本到short
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableByte(System.String)">
            <summary>
              文本到byte
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableDecimal(System.String)">
            <summary>
              文本到decimal
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableDouble(System.String)">
            <summary>
              文本到double
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableFloat(System.String)">
            <summary>
              文本到float
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableDateTime(System.String)">
            <summary>
              文本到float
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableChar(System.String)">
            <summary>
              文本到char
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableBoolean(System.String)">
            <summary>
              文本到布尔
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToNullableGuid(System.String)">
            <summary>
              文本到
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToString(System.Object)">
            <summary>
              文本到string
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToFloat(System.Object)">
            <summary>
              文本到日期
            </summary>
            <param name="value"> 文本 </param>
            <returns> 日期 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableFloat(System.Object)">
            <summary>
              文本到日期
            </summary>
            <param name="value"> 文本 </param>
            <returns> 日期 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToDouble(System.Object)">
            <summary>
              文本到日期
            </summary>
            <param name="value"> 文本 </param>
            <returns> 日期 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableDouble(System.Object)">
            <summary>
              文本到日期
            </summary>
            <param name="value"> 文本 </param>
            <returns> 日期 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToDate(System.Object)">
            <summary>
              文本到日期
            </summary>
            <param name="value"> 文本 </param>
            <returns> 日期 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableDate(System.Object)">
            <summary>
              文本到日期
            </summary>
            <param name="value"> 文本 </param>
            <returns> 日期 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToDecimal(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableDecimal(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToLong(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableLong(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToInt(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableInt(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToGuid(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableGuid(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToBool(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.ValueToNullableBool(System.Object)">
            <summary>
              文本到数字
            </summary>
            <param name="value"> 文本 </param>
            <returns> 数字 </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.DictionaryString(System.Collections.IDictionary)">
            <summary>
              显示集合的所有文本
            </summary>
            <param name="d"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToIds(System.String)">
            <summary>
              以逗号分开的文本串变为数字列表
            </summary>
            <param name="s"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringToIntList(System.String)">
            <summary>
              以逗号分开的文本串变为数字列表
            </summary>
            <param name="s"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringIds(System.Collections.Generic.List{System.Int64})">
            <summary>
              将ID变为一个以逗号分开的文本串
            </summary>
            <param name="ids"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringIds(System.Collections.Generic.List{System.Int32})">
            <summary>
              将ID变为一个以逗号分开的文本串
            </summary>
            <param name="ids"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.StringList(System.Collections.Generic.List{System.String})">
            <summary>
              将ID变为一个以逗号分开的文本串
            </summary>
            <param name="ids"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.IsNull(System.Object)">
            <summary>
              数据是不是空
            </summary>
            <param name="a"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.IsNull2(System.Object)">
            <summary>
              数据是不是空
            </summary>
            <param name="a"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.GetString(System.Object,System.String)">
            <summary>
              取得值
            </summary>
            <param name="value"> </param>
            <param name="def"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.GetValue``1(System.Object,``0)">
            <summary>
              取得值
            </summary>
            <param name="value"> </param>
            <param name="def"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.GetValue``1(System.Object,System.Func{System.Object,``0},``0)">
            <summary>
              取得值
            </summary>
            <param name="value"> </param>
            <param name="convert"> </param>
            <param name="def"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.IsEquals(System.Object,System.Object,System.Boolean@,System.Boolean@)">
            <summary>
              数据是不是相等
            </summary>
            <param name="a"> </param>
            <param name="b"> </param>
            <param name="aNull"> </param>
            <param name="bNull"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.IsEquals(System.Object,System.Object)">
            <summary>
              数据是不是相等
            </summary>
            <param name="a"> </param>
            <param name="b"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.EditStringToDate(System.String,System.Object@)">
            <summary>
              编辑文本转为日期
            </summary>
            <param name="str"> </param>
            <param name="rv"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.EditStringToDateTime(System.String,System.Object@)">
            <summary>
              编辑文本转为日期
            </summary>
            <param name="str"> </param>
            <param name="rv"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.EditStringToTime(System.String,System.Object@)">
            <summary>
              编辑文本转为日期
            </summary>
            <param name="str"> </param>
            <param name="rv"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.IsFlag(System.Int64)">
            <summary>
              检测一个数是否有多个位
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.CallNgen(System.String)">
            <summary>
            调用ngen.exe并执行文件的本机代码编译
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.Install(System.String)">
            <summary>
            调用ngen.exe安装文件的本机代码编译版本
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.Uninstall(System.String)">
            <summary>
            调用ngen.exe反安装文件的本机代码编译版本
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.GetConvert``1">
            <summary>
                得到强类型转换器
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Base.TypeHelper.GetStringConvert``1">
            <summary>
                得到强类型转换器
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Agebull.Common.Base.ScopeBase">
            <summary>
              范围对象的基类
            </summary>
        </member>
        <member name="M:Agebull.Common.Base.ScopeBase.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:Agebull.Common.Base.ScopeBase.OnDispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:Agebull.Common.Base.ScopeBase.IsDisposed">
            <summary>
            防止多次析构
            </summary>
        </member>
        <member name="M:Agebull.Common.Base.ScopeBase.Dispose">
            <summary>
              析构
            </summary>
        </member>
        <member name="M:Agebull.Common.Base.ScopeBase.DoDispose">
            <summary>
              析构
            </summary>
        </member>
        <member name="T:Agebull.Common.Base.EmptyScope">
            <summary>
            根据步骤范围
            </summary>
        </member>
        <member name="M:Agebull.Common.Base.EmptyScope.OnDispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="T:Agebull.Common.UrlHelper">
            <summary>
            对URL的扩展
            </summary>
        </member>
        <member name="M:Agebull.Common.UrlHelper.GetQueryString(System.String)">
            <summary>
            将查询字符串解析转换为名值集合.
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.UrlHelper.GetQueryString(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            将查询字符串解析转换为名值集合.
            </summary>
            <param name="queryString"></param>
            <param name="encoding"></param>
            <param name="isEncoded"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.UrlHelper.MyUrlDeCode(System.String,System.Text.Encoding)">
            <summary>
            解码URL.
            </summary>
            <param name="encoding">null为自动选择编码</param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Agebull.Common.Help.CSVConvert">
            <summary>
            CSV文件转换对象
            </summary>
        </member>
        <member name="M:Agebull.Common.Help.CSVConvert.Import``1(System.String,System.Action{``0,System.String,System.String})">
            <summary>
            导入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="setValue"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Help.CSVConvert.Split(System.String)">
            <summary>
            CSV内容分解
            </summary>
            <param name="values">CSV内容</param>
            <returns>分解后的分行列的文本</returns>
        </member>
        <member name="M:Agebull.Common.Help.CSVConvert.ImportFile(System.String)">
            <summary>
            导入文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Help.CSVConvert.Export``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            导出
            </summary>
            <param name="heads"></param>
            <param name="datas"></param>
            <param name="rFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Agebull.Common.FileType">
            <summary>
              文件类型
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.None">
            <summary>
              其它文件
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.Image">
            <summary>
              图像
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.Audio">
            <summary>
              音频
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.Vedio">
            <summary>
              视频
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.Doc">
            <summary>
              WORD文档
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.Xls">
            <summary>
              EXCEL文档
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.PPT">
            <summary>
              PPT文档
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.PDF">
            <summary>
              PDF文档
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.WPS">
            <summary>
            WPS文件
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.TEXT">
            <summary>
            文本文件
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.HTML">
            <summary>
            网页
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.EXE">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.ZIP">
            <summary>
            压缩文件
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.CHM">
            <summary>
            帮助文件
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.CODE">
            <summary>
            程序代码
            </summary>
        </member>
        <member name="F:Agebull.Common.FileType.Data">
            <summary>
            数据文件
            </summary>
        </member>
        <member name="T:Agebull.Common.IOHelper">
            <summary>
              文件或文件夹操作帮助类
            </summary>
        </member>
        <member name="M:Agebull.Common.IOHelper.DeleteDirectory(System.String,System.Boolean)">
            <summary>
              删除或清除一个目录下的所有文件和目录
            </summary>
            <param name="directory"> </param>
            <param name="delete"> 清除目录下的内容而不删除目录 </param>
        </member>
        <member name="M:Agebull.Common.IOHelper.CheckPath(System.String,System.String[])">
            <summary>
              检查一个路径是否存在,不存在则建立之
            </summary>
            <param name="root"> 根 </param>
            <param name="floders"> 路径,不可以用\的组合 </param>
            <returns> 组合成的路径 </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.CheckPaths(System.String)">
            <summary>
              检查一个路径是否存在,不存在则建立之
            </summary>
            <param name="path"> 目录 </param>
            <returns> 组合成的路径 </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.CheckPaths(System.String,System.String)">
            <summary>
              检查一个路径是否存在,不存在则建立之
            </summary>
            <param name="root"> 根 </param>
            <param name="floder"> 路径,可以用\的组合 </param>
            <returns> 组合成的路径 </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.WriteFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
              写文件
            </summary>
            <param name="path"> 路径(如果不存在会被创建 </param>
            <param name="name"> 文件名 </param>
            <param name="txt"> 要写入的文本 </param>
            <param name="alwaysWrite"> 是否总是写入,如果先否并且文件存在将不修改文件 </param>
        </member>
        <member name="M:Agebull.Common.IOHelper.WriteFile(System.String,System.String,System.Boolean)">
            <summary>
              写文件
            </summary>
            <param name="fullName"> 路径(如果不存在会被创建 </param>
            <param name="txt"> 要写入的文本 </param>
            <param name="alwaysWrite"> 是否总是写入,如果先否并且文件存在将不修改文件 </param>
        </member>
        <member name="M:Agebull.Common.IOHelper.Save``1(``0,System.String)">
            <summary>
              保存对象
            </summary>
            <typeparam name="T"> 对象类型 </typeparam>
            <param name="t"> 对象 </param>
            <param name="fullName"> 文件名 </param>
        </member>
        <member name="M:Agebull.Common.IOHelper.TryLoad``1(System.String)">
            <summary>
              载入对象
            </summary>
            <typeparam name="T"> 对象类型 </typeparam>
            <param name="fileName"> 文件名 </param>
            <returns> 对象 </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.XMLSerializer(System.Object)">
            <summary>
              序列化到XML
            </summary>
            <param name="args"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.XMLSerializer``1(``0)">
            <summary>
              序列化到XML
            </summary>
            <param name="args"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.XMLSerializer``1(System.IO.Stream,``0)">
            <summary>
              序列化到XML
            </summary>
            <param name="ms"> </param>
            <param name="args"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.XMLDeSerializer``1(System.IO.Stream)">
            <summary>
              从XML反序列化
            </summary>
            <param name="ms"> </param>
            <returns> T </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.XMLDeSerializer``1(System.String)">
            <summary>
              从XML反序列化
            </summary>
            <param name="args"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.ReadBinary(System.String)">
            <summary>
              读取一个文件的二进制数据
            </summary>
            <param name="filename"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.ReadString(System.String)">
            <summary>
              读取一个文件的文本数据
            </summary>
            <param name="filename"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.ToFileName(System.String[])">
            <summary>
            将名称合并为合乎要求的文件名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.GetAllField(System.String,System.String)">
            <summary>
              得到一个路径下所有文件名
            </summary>
            <param name="path"> </param>
            <param name="ext"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.GetAllFiles(System.String,System.String)">
            <summary>
              得到一个路径下所有文件名
            </summary>
            <param name="path"> </param>
            <param name="ext"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.GetAllFiles(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
              得到一个路径下所有文件名
            </summary>
            <param name="fields"> </param>
            <param name="path"> </param>
            <param name="ext"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.CopyPath(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
              路径复制
            </summary>
            <param name="srcPath"> 源路径 </param>
            <param name="destPath"> 目的路径 </param>
            <param name="ext"> 包括的扩展名 </param>
            <param name="child"> 是否包括子文件 </param>
            <param name="replace"> 是否替换已存在的文件 </param>
            <param name="excludes"> 排除列表 </param>
        </member>
        <member name="M:Agebull.Common.IOHelper.GetEncoding(System.String)">
            <summary>
              取得一个文本文件的编码方式。如果无法在文件头部找到有效的前导符，Encoding.Default将被返回。
            </summary>
            <param name="fileName"> 文件名。 </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.GetEncoding(System.IO.Stream)">
            <summary>
              取得一个文本文件流的编码方式。
            </summary>
            <param name="stream"> 文本文件流。 </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
              取得一个文本文件的编码方式。
            </summary>
            <param name="fileName"> 文件名。 </param>
            <param name="defaultEncoding"> 默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。 </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.GetEncoding(System.IO.Stream,System.Text.Encoding)">
            <summary>
              取得一个文本文件流的编码方式。
            </summary>
            <param name="stream"> 文本文件流。 </param>
            <param name="defaultEncoding"> 默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。 </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.FolderDiskInfo(System.String)">
            <summary>
            Linux下取目录大小信息
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.WindowsFolderDiskInfo(System.String)">
            <summary>
            Linux下取目录大小信息
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.IOHelper.LinuxFolderDiskInfo(System.String)">
            <summary>
            Linux下取目录大小信息
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Agebull.Common.IOHelper.DiskInfo">
            <summary>
            磁盘空间
            </summary>
        </member>
        <member name="P:Agebull.Common.IOHelper.DiskInfo.TotalSize">
            <summary>
            总大小
            </summary>
        </member>
        <member name="P:Agebull.Common.IOHelper.DiskInfo.UsedSize">
            <summary>
            已使用
            </summary>
        </member>
        <member name="P:Agebull.Common.IOHelper.DiskInfo.AvailableSize">
            <summary>
            剩余空间
            </summary>
        </member>
        <member name="P:Agebull.Common.IOHelper.DiskInfo.Use">
            <summary>
            使用率
            </summary>
        </member>
        <member name="T:Agebull.Common.Xml.XmlHelper">
            <summary>
              XML 文件解析的操作包装
            </summary>
        </member>
        <member name="M:Agebull.Common.Xml.XmlHelper.MoveXmlTo(System.Xml.XmlReader,System.String,System.String[])">
            <summary>
              移动读取器到一个位置
            </summary>
            <param name="xr"> 读取器 </param>
            <param name="parfriend"> </param>
            <param name="path"> 路径 </param>
            <returns> 成功或失败 </returns>
        </member>
        <member name="M:Agebull.Common.Xml.XmlHelper.MoveXmlTo(System.Xml.XmlReader,System.String[])">
            <summary>
              移动读取器到一个位置
            </summary>
            <param name="xr"> 读取器 </param>
            <param name="path"> 路径 </param>
            <returns> 成功或失败 </returns>
        </member>
        <member name="M:Agebull.Common.Xml.XmlHelper.ReadXmlText(System.Xml.XmlReader)">
            <summary>
              读取当前位位置的文本(已做TRIM处理)
            </summary>
            <param name="xr"> 读取器 </param>
            <returns> 文本 </returns>
        </member>
        <member name="M:Agebull.Common.Xml.XmlHelper.ReadXmlAttrib(System.Xml.XmlReader,System.String)">
            <summary>
              读取当前位位置的一个属性的值
            </summary>
            <param name="xr"> 读取器 </param>
            <param name="attName"> 属性名 </param>
            <returns> 属性值 </returns>
        </member>
        <member name="M:Agebull.Common.Xml.XmlHelper.Write(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.Object)">
            <summary>
              读取当前位位置的一个属性的值
            </summary>
            <param name="doc"> 读取器 </param>
            <param name="par"> 属性节点($SG$) </param>
            <param name="name"> 属性名($SG$) </param>
            <param name="value"> 属性值($SG$) </param>
            <returns> 属性值 </returns>
        </member>
        <member name="M:Agebull.Common.Xml.XmlHelper.BuildXml(System.String,System.String[])">
            <summary>
              生成XML
            </summary>
            <param name="rootName"> </param>
            <param name="nodes"> </param>
            <returns> </returns>
        </member>
        <member name="T:Agebull.Common.Logging.FlowTracer">
            <summary>
              流程跟踪器
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.TraceStepScope(System.String)">
            <summary>
            步骤范围
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.DebugStepScope(System.String)">
            <summary>
            步骤范围
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.#cctor">
            <summary>
              静态构造
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.ReadConfig">
            <summary>
            读取配置
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.FlowTracer.Level">
            <summary>
            当前日志级别
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.FlowTracer.LogMonitor">
            <summary>
            是否启动跟踪日志
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.FlowTracer.LogMonitorInformation">
            <summary>
            是否启动跟踪日志
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.FlowTracer.LogMonitorDebug">
            <summary>
            跟踪日志是否包含详细信息
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.FlowTracer.LogMonitorTrace">
            <summary>
            跟踪日志是否包含详细信息
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.FlowTracer.MonitorItem">
            <summary>
            当前范围数据
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.BeginMonitor(System.String)">
            <summary>
            开始检测资源
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.BeginMonitor(Agebull.Common.Logging.TraceStep)">
            <summary>
            开始检测资源
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.BeginStepMonitor(System.String)">
            <summary>
            开始监视日志步骤
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.BeginStepMonitor(System.Func{System.String})">
            <summary>
            开始监视日志步骤
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.BeginDebugStepMonitor(System.Func{System.String})">
            <summary>
            开始监视日志步骤
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.BeginDebugStepMonitor(System.String)">
            <summary>
            开始监视日志步骤
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.EndDebugStepMonitor">
            <summary>
            结束监视日志步骤
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.EndStepMonitor">
            <summary>
            结束监视日志步骤
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorInfomation(System.String)">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorInfomation(System.String,System.Object[])">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorInfomation(System.Func{System.String})">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorTrace(System.String)">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorTrace(System.Func{System.String})">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorDetails(System.Func{System.String})">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorDetails(System.String)">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorError(System.Func{System.String})">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorError(System.Exception,System.String)">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.MonitorError(System.String)">
            <summary>
            加入监视跟踪
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.EndMonitor">
            <summary>
            结束监视日志
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.TraceMonitor(Microsoft.Extensions.Logging.ILogger,Agebull.Common.Logging.TraceStep)">
            <summary>
            结束监视日志
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.TraceMonitor(Agebull.Common.Logging.TraceStep)">
            <summary>
            结束监视日志
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.Message(System.Text.StringBuilder,System.DateTime,Agebull.Common.Logging.TraceStep,System.Int32)">
            <summary>
                刷新资源检测
            </summary>
        </member>
        <member name="T:Agebull.Common.Logging.FlowTracer.FlowTracerStepScope">
            <summary>
            流程跟踪步骤范围
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.FlowTracerStepScope.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Agebull.Common.Logging.FlowTracer.FlowTracerDebugStepScope">
            <summary>
            流程跟踪调试步骤范围
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.FlowTracerDebugStepScope.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Agebull.Common.Logging.FlowTracer.Local">
            <summary>
                跟踪信息
            </summary>
        </member>
        <member name="F:Agebull.Common.Logging.FlowTracer.Local.Stack">
            <summary>
                记录堆栈
            </summary>
        </member>
        <member name="F:Agebull.Common.Logging.FlowTracer.Local.InMonitor">
            <summary>
                侦测开关
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.Local.BeginMonitor(System.String)">
            <summary>
                开始检测资源
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.Local.BeginMonitor(Agebull.Common.Logging.TraceStep)">
            <summary>
                开始检测资源
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.Local.BeginStep(System.String)">
            <summary>
                刷新资源检测
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.Local.EndStep">
            <summary>
                刷新资源检测
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.Local.End">
            <summary>
                刷新资源检测
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.FlowTracer.Local.Trace(System.String)">
            <summary>
            设置跟踪消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Agebull.Common.Logging.LocalTraceStack">
            <summary>
              表示一个栈底为固定值的栈
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.LocalTraceStack.StackCount">
            <summary>
            栈深
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.LocalTraceStack.Current">
            <summary>
              当前
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.LocalTraceStack.IsEmpty">
            <summary>
             栈是否为空
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.LocalTraceStack.FixValue">
            <summary>
              固定
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.LocalTraceStack.SetFix(Agebull.Common.Logging.TraceStep)">
            <summary>
              配置固定值(只第一次调用有效果)
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Agebull.Common.Logging.LocalTraceStack.Push(Agebull.Common.Logging.TraceStep)">
            <summary>
              入栈
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Agebull.Common.Logging.LocalTraceStack.Pop">
            <summary>
              出栈
            </summary>
        </member>
        <member name="T:Agebull.Common.Logging.LoggerExtension">
            <summary>
              日志记录器
            </summary>
        </member>
        <member name="F:Agebull.Common.Logging.LoggerExtension.lastId">
            <summary>
            日志序号
            </summary>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.NewEventId(System.String)">
            <summary>
            新的事件ID
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Warning(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
              记录警告消息
            </summary>
             <param name="logger">日志记录器</param>
            <param name="message"> 日志详细信息 </param>
            <param name="formatArgs"> 格式化的参数 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Warning(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
              记录警告消息
            </summary>
             <param name="logger">日志记录器</param>
            <param name="message"> 日志详细信息 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Error(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
              记录错误消息
            </summary>
             <param name="logger">日志记录器</param>
            <param name="message"> 日志详细信息 </param>
            <param name="formatArgs"> 格式化的参数 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Exception(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)">
            <summary>
              记录异常日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="exception"> 异常 </param>
            <param name="message"> 日志详细信息 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Exception(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
              记录异常日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="ex"> 异常 </param>
            <param name="message"> 日志详细信息 </param>
            <param name="formatArgs">格式化参数</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Trace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message"> 日志详细信息 </param>
            <param name="formatArgs">格式化参数</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.StackTraceInfomation(System.String,System.Object[])">
             <summary>
               堆栈信息
             </summary>
            <param name="message"> 日志详细信息 </param>
            <param name="formatArgs"> 格式化的参数 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.DebugByStackTrace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
              写入调试日志同时记录堆栈信息
            </summary>
             <param name="logger">日志记录器</param>
            <param name="message"> 日志详细信息 </param>
            <param name="formatArgs"> 格式化的参数 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
              写入调试日志.
            </summary>
            <param name="logger">日志记录器</param>
            <param name="message"> 日志详细信息 </param>
            <param name="formatArgs">格式化参数</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.Object)">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="obj"> 记录对象 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Object[])">
            <summary>
              记录一般日志
            </summary>
             <param name="logger">日志记录器</param>
            <param name="name"> </param>
            <param name="message"> 消息 </param>
            <param name="formatArgs"> 格式化的参数 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Trace(Microsoft.Extensions.Logging.ILogger,System.Func{System.String})">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="func"> 消息方法</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Debug(Microsoft.Extensions.Logging.ILogger,System.Func{System.String})">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="func"> 消息方法</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Information(Microsoft.Extensions.Logging.ILogger,System.Func{System.String})">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="func"> 消息方法</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Information(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])">
            <summary>
              记录一般日志
            </summary>
             <param name="logger">日志记录器</param>
            <param name="message"> 消息 </param>
            <param name="formatArgs"> 格式化的参数 </param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Information(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="msg"> 消息</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Warning(Microsoft.Extensions.Logging.ILogger,System.Func{System.String})">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="func"> 消息方法</param>
        </member>
        <member name="M:Agebull.Common.Logging.LoggerExtension.Error(Microsoft.Extensions.Logging.ILogger,System.Func{System.String})">
            <summary>
              写入调试日志
            </summary>
            <param name="logger">日志记录器</param>
            <param name="func"> 消息方法</param>
        </member>
        <member name="T:Agebull.Common.Logging.TraceItem">
            <summary>
                跟踪信息
            </summary>
        </member>
        <member name="F:Agebull.Common.Logging.TraceItem.Message">
            <summary>
                文本
            </summary>
        </member>
        <member name="T:Agebull.Common.Logging.TraceStep">
            <summary>
                跟踪信息
            </summary>
        </member>
        <member name="P:Agebull.Common.Logging.TraceStep.Children">
            <summary>
            子级
            </summary>
        </member>
        <member name="F:Agebull.Common.Logging.TraceStep.Start">
            <summary>
                起止时间
            </summary>
        </member>
        <member name="F:Agebull.Common.Logging.TraceStep.End">
            <summary>
                起止时间
            </summary>
        </member>
        <member name="T:Agebull.Common.Reflection.EnumHelper">
            <summary>
              枚举的帮助类
            </summary>
        </member>
        <member name="M:Agebull.Common.Reflection.EnumHelper.GetCaption``1(``0)">
            <summary>
              得到枚举中文表示的值
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.EnumHelper.KeyValue``1(System.Boolean)">
            <summary>
              得到枚举以中文表示的值
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.EnumHelper.GetEnumFields(System.Type,System.Boolean)">
            <summary>
              得到枚举以中文表示的值
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.EnumHelper.GetEnumInfomation(System.Type)">
            <summary>
              得到枚举以中文表示的值
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.EnumHelper.GetEnumInfomation(System.String)">
            <summary>
              得到枚举以中文表示的值
            </summary>
            <returns> </returns>
        </member>
        <member name="F:Agebull.Common.Reflection.EnumHelper.EnumInfomationMaps">
            <summary>
              枚举以中文表示的值的字典，以防止每次都需要做反序列化
            </summary>
        </member>
        <member name="T:Agebull.Common.Reflection.IEnumInfomation">
            <summary>
              表示一个枚举的值文本对应表节点
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.IEnumInfomation.Caption">
            <summary>
              文本
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.IEnumInfomation.Value">
            <summary>
              内容
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.IEnumInfomation.LValue">
            <summary>
              内容
            </summary>
        </member>
        <member name="T:Agebull.Common.Reflection.EnumInfomation">
            <summary>
              表示一个枚举的值文本对应表节点
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.EnumInfomation.Caption">
            <summary>
              文本
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.EnumInfomation.Value">
            <summary>
              内容
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.EnumInfomation.LValue">
            <summary>
              内容
            </summary>
        </member>
        <member name="M:Agebull.Common.Reflection.EnumInfomation.ToString">
            <summary>
              到文本
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Agebull.Common.Reflection.EnumInfomation`1">
            <summary>
              表示一个枚举的值文本对应表节点
            </summary>
            <typeparam name="T"> 枚举 </typeparam>
        </member>
        <member name="P:Agebull.Common.Reflection.EnumInfomation`1.Caption">
            <summary>
              文本
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.EnumInfomation`1.Value">
            <summary>
              内容
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.EnumInfomation`1.LValue">
            <summary>
              内容
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.EnumInfomation`1.Agebull#Common#Reflection#IEnumInfomation#Value">
            <summary>
              内容
            </summary>
        </member>
        <member name="M:Agebull.Common.Reflection.EnumInfomation`1.ToString">
            <summary>
              到文本
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Agebull.Common.Reflection.ITypeInfomation">
            <summary>
              类型信息
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ITypeInfomation.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ITypeInfomation.ClassID">
            <summary>
            类型ID
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ITypeInfomation.FullName">
            <summary>
              全名(包括命名空间)
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ITypeInfomation.GenericArguments">
            <summary>
              泛型参数
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ITypeInfomation.TypeName">
            <summary>
              短名(不包括命名空间)
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ITypeInfomation.NameSpace">
            <summary>
              命令空间
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ITypeInfomation.Type">
            <summary>
              原始类型
            </summary>
        </member>
        <member name="T:Agebull.Common.Reflection.ReflectionHelper">
            <summary>
                反射的实例类
            </summary>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.CreateObject(System.String)">
            <summary>
                生成一个类型的实例
            </summary>
            <param name="typeName"> 类型 </param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.CreateObject(System.Type)">
            <summary>
                生成一个类型的实例
            </summary>
            <param name="type"> 类型 </param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.CreateGenericObject(System.Reflection.Assembly,System.Type,System.Type[])">
            <summary>
                生成一个泛型类型的实例
            </summary>
            <param name="assembly"> 泛型所在的程序集(极其重要) </param>
            <param name="generic"> 空的泛型 </param>
            <param name="genericArguments"> 严格对应好的泛型的参数类型 </param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.CreateGenericObject(System.Type,System.Type[])">
            <summary>
                生成一个泛型类型的实例
            </summary>
            <param name="generic"> 空的泛型 </param>
            <param name="genericArguments"> 严格对应好的泛型的参数类型 </param>
            <returns> 类型的实例 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.InvokeStaticMethod(System.Type,System.String)">
            <summary>
                运行一个对象的静态方法
            </summary>
            <param name="type"> 类型 </param>
            <param name="name"> 方法名 </param>
            <returns> 返回值 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
                运行一个对象的静态方法
            </summary>
            <param name="type"> 类型 </param>
            <param name="name"> 方法名 </param>
            <param name="args"> 方法运行的参数 </param>
            <returns> 返回值 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.InvokeMethod(System.Type,System.String,System.Object,System.Object[])">
            <summary>
                运行一个对象的方法
            </summary>
            <param name="type"> 类型 </param>
            <param name="name"> 方法名 </param>
            <param name="obj"> 类的实例 </param>
            <param name="args"> 方法运行的参数 </param>
            <returns> 返回值 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetProperty(System.Type,System.String,System.Object)">
            <summary>
                得到一个对象的属性
            </summary>
            <param name="type"> 类型 </param>
            <param name="name"> 属性名 </param>
            <param name="obj"> 类的实例,不能为空 </param>
            <returns> 返回值 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.TryGetProperty(System.Type,System.String,System.Object)">
            <summary>
                得到一个对象的属性
            </summary>
            <param name="type"> 类型 </param>
            <param name="name"> 属性名 </param>
            <param name="obj"> 类的实例,不能为空 </param>
            <returns> 返回值 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.SetProperty(System.Type,System.String,System.Object,System.Object)">
            <summary>
                配置一个对象的属性
            </summary>
            <param name="type"> 类型 </param>
            <param name="name"> 属性名 </param>
            <param name="obj"> 类的实例,不能为空 </param>
            <param name="arg"> 要配置的值 </param>
            <returns> 返回值 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.SetProperty(Agebull.Common.Reflection.SetTypePropertyArgs)">
            <summary>
                配置一个对象的属性
            </summary>
            <param name="args"> 要配置的值 </param>
            <returns> 返回值 </returns>
        </member>
        <member name="P:Agebull.Common.Reflection.ReflectionHelper.ThisType">
            <summary>
                类型
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.ReflectionHelper.ThisObject">
            <summary>
                实例
            </summary>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.#ctor(System.Type)">
            <summary>
                用类型来构造
            </summary>
            <param name="type"> 类型 </param>
        </member>
        <member name="P:Agebull.Common.Reflection.ReflectionHelper.Item(System.String)">
            <summary>
                读取或配置类型实例的属性
            </summary>
            <param name="property"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.Invoke(System.String,System.Object[])">
            <summary>
                运行有参方法
            </summary>
            <param name="name"> 方法名 </param>
            <param name="args"> 参数 </param>
            <returns> 返回结果 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.Invoke(System.String)">
            <summary>
                运行无参方法
            </summary>
            <param name="name"> 方法名 </param>
            <returns> 返回结果 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.TryParse(System.Type,System.String)">
            <summary>
                运行值类型的TryParse方法,以进行文本到对象的转化
            </summary>
            <param name="type"> 类型 </param>
            <param name="value"> 文本值 </param>
            <returns> 转换是否成功 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.Invoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
                通过MethodInfo对象来运行方法
            </summary>
            <param name="mi"> MethodInfo对象 </param>
            <param name="obj"> 对象实例 </param>
            <param name="args"> 参数 </param>
            <returns> 方法的返回值 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.Deserialize(System.Type,System.String)">
            <summary>
                对值与类 类型进行到实例的反序列化
            </summary>
            <param name="type"> 类型 </param>
            <param name="value"> 文本值 </param>
            <returns> 反序列化后的类实例 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.BuilderArg(System.Type,System.String)">
            <summary>
                构造反射调用时的参数
            </summary>
            <param name="type"> 类型 </param>
            <param name="value"> 文本参数值 </param>
            <returns> 构造好的参数 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.IsStatic(System.Type)">
            <summary>
                构造反射调用时的参数
            </summary>
            <param name="type"> 类型 </param>
            <returns> 构造好的参数 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.IsNullableType(Agebull.Common.Reflection.ITypeInfomation)">
            <summary>
                是否空的值类型
            </summary>
            <param name="info"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetKnowTypes(System.Type)">
            <summary>
                得到一个基类的所有已知类型
            </summary>
            <param name="type"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.HaseSubclass(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
                检查一个类有无被继承
            </summary>
            <param name="knows"> </param>
            <param name="type"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.ToResult(System.Type,System.Object)">
            <summary>
                将返回的对象序列化为可直接写到XML文件的XML文本
            </summary>
            <param name="type"> 类型 </param>
            <param name="value"> 返回值 </param>
            <returns> 序列化后的文本 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.Execuest(System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                根据对象实例运行它的方法并返回
            </summary>
            <param name="obj"> 对象实例 </param>
            <param name="name"> 方法名 </param>
            <param name="args"> 名称=值格式的参数表 </param>
            <returns> 返回值 </returns>
            <exception cref="T:System.ArgumentException">
                <code>调用的参数有错误</code>
                <code>调用的方法时发生内部错误</code>
                <code>调用的方法不存在</code>
            </exception>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.Serialize(System.Object)">
            <summary>
            </summary>
            <param name="o"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.Deserialize(System.String)">
            <summary>
            </summary>
            <param name="s"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.BuildKnowType(System.Type,System.String)">
            <summary>
                生成一个类的已知类型代码
            </summary>
            <param name="type"> 类 </param>
            <param name="format"> 格式化代码 </param>
            <returns> 代码 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeFullName(System.Type)">
            <summary>
                得到类型的可读名字
            </summary>
            <param name="type"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeName(System.Object)">
            <summary>
                得到对象的可读类型名字
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeName(System.Type)">
            <summary>
                得到类型的可读名字
            </summary>
            <param name="type"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeName(System.Type,System.Boolean)">
            <summary>
                得到类型的可读名字
            </summary>
            <param name="type"> </param>
            <param name="isFull"></param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeNameInner(System.Type,System.Boolean)">
            <summary>
                得到类型的可读名字
            </summary>
            <param name="type"> </param>
            <param name="isFull"></param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeNameSpace(System.Object)">
            <summary>
                得到对象的可读类型名字
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeNameSpace(System.Type)">
            <summary>
                得到类型的可读名字
            </summary>
            <param name="type"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeNameSpace(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
                得到类型的可读名字
            </summary>
            <param name="type"> </param>
            <param name="sps"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeInfomation``1(System.Type,``0)">
            <summary>
                得到类型的可读信息
            </summary>
            <param name="type">类型</param>
            <param name="root"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeInfomation``1(System.Type,System.Func{``0})">
            <summary>
                得到类型的可读信息
            </summary>
            <param name="type">类型</param>
            <param name="creater">对象构造器 </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.BuildAllClassCopyCode(System.Type)">
            <summary>
                生成一个类及派生类的复制代码
            </summary>
            <param name="type"> 类 </param>
            <returns> 代码 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.BuildClassCopyCode(System.Type,System.Type)">
            <summary>
                生成一个类的复制代码
            </summary>
            <param name="type"> 派生类 </param>
            <param name="baseType"> 基类 </param>
            <returns> 代码 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.ReadExctption(System.Exception,System.String)">
            <summary>
                读取并格式化异常信息
            </summary>
            <param name="err"> 异常 </param>
            <param name="ti"> 缩进 </param>
            <returns> 格式化后的文本 </returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetThisHead(System.String)">
            <summary>
            取得this属性的正确名称
            </summary>
            <param name="name">名称</param>
            <returns>his属性的正确名称</returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetTypeShowName(System.String)">
            <summary>
            取得短名称
            </summary>
            <param name="name">名称</param>
            <returns>短名称</returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.CheckTypeString(System.String)">
            <summary>
            检查文字的类型名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.SerializeException(System.Exception,System.String)">
            <summary>
                序列化异常到XML
            </summary>
            <param name="err"> 异常 </param>
            <returns> 序列化后的XML </returns>
            <param name="rootMessage"> 错误标题 </param>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.SerializeException(System.Exception,System.Xml.Linq.XElement)">
            <summary>
                序列化异常(内部递归)
            </summary>
            <param name="err"> 异常 </param>
            <param name="par"> 上级节点 </param>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetName(System.Linq.Expressions.Expression{System.Delegate})">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetName(System.Linq.Expressions.MemberExpression)">
            <summary>
                取得名称
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetFunc``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetFunc``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetValue(System.Linq.Expressions.Expression)">
            <summary>
                取得值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
                取得方法委托
            </summary>
            <param name="expression"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.InvokeStaticMethodByExpression(System.Reflection.Assembly,System.String,System.String)">
            <summary>
                运行一个对象的静态方法(非反射执行)
            </summary>
            <param name="assembly">程序集</param>
            <param name="typeName"> 类型名称 </param>
            <param name="methodName"> 方法名 </param>
            <remarks>
                感谢博客园大牛鹤冲天,相关文章:http://www.cnblogs.com/ldp615/archive/2013/03/31/2991304.html
            </remarks>
        </member>
        <member name="M:Agebull.Common.Reflection.ReflectionHelper.InvokeStaticMethodByExpression(System.Type,System.String)">
            <summary>
                运行一个对象的静态方法(非反射执行)
            </summary>
            <param name="type"> 类型 </param>
            <param name="name"> 方法名 </param>
            <remarks>
                感谢博客园大牛鹤冲天,相关文章:http://www.cnblogs.com/ldp615/archive/2013/03/31/2991304.html
            </remarks>
        </member>
        <member name="T:Agebull.Common.Reflection.SetTypePropertyArgs`2">
            <summary>
              表示为一个类型实例配置值的参数
            </summary>
            <typeparam name="A"> </typeparam>
            <typeparam name="B"> </typeparam>
        </member>
        <member name="P:Agebull.Common.Reflection.SetTypePropertyArgs`2.Object">
            <summary>
              实例对象
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.SetTypePropertyArgs`2.Property">
            <summary>
              属性
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.SetTypePropertyArgs`2.Value">
            <summary>
              值
            </summary>
        </member>
        <member name="M:Agebull.Common.Reflection.SetTypePropertyArgs`2.SetProperty(`1)">
            <summary>
              配置值
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Agebull.Common.Reflection.SetTypePropertyArgs`2.SetProperty">
            <summary>
              配置值
            </summary>
        </member>
        <member name="T:Agebull.Common.Reflection.SetTypePropertyArgs">
            <summary>
              表示为一个类型实例配置值的参数
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.SetTypePropertyArgs.Type">
            <summary>
              类型
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.SetTypePropertyArgs.Object">
            <summary>
              实例对象
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.SetTypePropertyArgs.Property">
            <summary>
              属性
            </summary>
        </member>
        <member name="P:Agebull.Common.Reflection.SetTypePropertyArgs.Value">
            <summary>
              值
            </summary>
        </member>
        <member name="M:Agebull.Common.Reflection.SetTypePropertyArgs.SetProperty(System.Object)">
            <summary>
              配置值
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Agebull.Common.Reflection.SetTypePropertyArgs.SetProperty">
            <summary>
              配置值
            </summary>
        </member>
        <member name="T:Agebull.Common.AtomLockScope">
            <summary>
              表示内部原子操作(不可重入)范围
            </summary>
        </member>
        <member name="F:Agebull.Common.AtomLockScope.AtomLock">
            <summary>
              锁对象
            </summary>
        </member>
        <member name="M:Agebull.Common.AtomLockScope.CreateLock(System.Object,System.String)">
            <summary>
              构造
            </summary>
            <param name="al"> 对象 </param>
            <param name="name"> 对象锁的名字 </param>
            <returns> 锁定范围，如果之前已锁定则为空 </returns>
        </member>
        <member name="M:Agebull.Common.AtomLockScope.IsLock(Agebull.Common.IAtomLock,System.String)">
            <summary>
              是否已锁定
            </summary>
            <param name="al"> 对象 </param>
            <param name="name"> 对象锁的名字 </param>
            <returns> 锁定范围，如果之前已锁定则为空 </returns>
            <remarks>
              名称是大小写敏感的
            </remarks>
        </member>
        <member name="M:Agebull.Common.AtomLockScope.IsLocked(System.Object,System.String)">
            <summary>
              是否已锁定
            </summary>
            <param name="al"> 对象 </param>
            <param name="name"> 对象锁的名字 </param>
            <returns> 锁定范围，如果之前已锁定则为空 </returns>
            <remarks>
              名称是大小写敏感的
            </remarks>
        </member>
        <member name="M:Agebull.Common.AtomLockScope.CreateLock(Agebull.Common.IAtomLock)">
            <summary>
              构造
            </summary>
            <param name="al"> 对象 </param>
            <returns> 锁定范围，如果之前已锁定则为空 </returns>
            <remarks>
              名称是大小写敏感的
            </remarks>
        </member>
        <member name="M:Agebull.Common.AtomLockScope.CreateLock(Agebull.Common.IAtomLock,System.String,System.String[])">
            <summary>
              构造
            </summary>
            <param name="al"> 对象 </param>
            <param name="name"> 对象锁的名字 </param>
            <param name="elimination"> 排斥的名称，即如果有这些名称的锁定将不能再次锁定 </param>
            <returns> 锁定范围，如果之前已锁定则为空 </returns>
            <remarks>
              名称是大小写敏感的
            </remarks>
        </member>
        <member name="F:Agebull.Common.AtomLockScope.AtomLocks">
            <summary>
              锁定表
            </summary>
        </member>
        <member name="F:Agebull.Common.AtomLockScope.LockName">
            <summary>
              当前范围作用的对象
            </summary>
        </member>
        <member name="M:Agebull.Common.AtomLockScope.#ctor">
            <summary>
              构造
            </summary>
        </member>
        <member name="M:Agebull.Common.AtomLockScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Agebull.Common.IAtomLock">
            <summary>
              表示一个原子锁对象
            </summary>
        </member>
        <member name="P:Agebull.Common.IAtomLock.IsAtomLock">
            <summary>
              正在被锁定,应该用AtomLockNames是否为空来表示，或自行处理
            </summary>
        </member>
        <member name="P:Agebull.Common.IAtomLock.AtomLockNames">
            <summary>
              正在被锁定名字集合
            </summary>
        </member>
        <member name="T:Agebull.Common.ScopeGroup">
            <summary>
            有效范围组
            </summary>
        </member>
        <member name="M:Agebull.Common.ScopeGroup.CreateScope(System.IDisposable[])">
            <summary>
            构造，此时改变上下文，析构时自动还原
            </summary>
            <param name="scopes"></param>
        </member>
        <member name="M:Agebull.Common.ScopeGroup.#ctor(System.IDisposable[])">
            <summary>
            构造，此时改变上下文，析构时自动还原
            </summary>
            <param name="scopes"></param>
        </member>
        <member name="M:Agebull.Common.ScopeGroup.OnDispose">
            <summary>
            执行析构的事情
            </summary>
        </member>
        <member name="T:Agebull.Common.Frame.ThreadLockScope">
            <summary>
            线程锁范围
            </summary>
            <remarks>
            利用Monitor在线程内可重复锁定一个对象和排斥其它线程使用这个对象的特点设计的锁范围
            在线程内可以多次锁定这个对象而不出错,而其它线程却需要等待锁定对象的线程结束范围后方可使用这个对象,
            用于保证锁定对象单元操作时的稳定性(不被意外地修改)
            注意:锁定的对象不能是值类型,因为值类型是被复制而不是被引用,这会导致锁定失败
            </remarks>
        </member>
        <member name="F:Agebull.Common.Frame.ThreadLockScope._lockObject">
            <summary>
            锁定对象
            </summary>
        </member>
        <member name="M:Agebull.Common.Frame.ThreadLockScope.Scope(System.Object)">
            <summary>
            构造
            </summary>
            <param name="lockObject">要锁定的一或多个对象</param>
        </member>
        <member name="M:Agebull.Common.Frame.ThreadLockScope.#ctor(System.Object)">
            <summary>
            构造
            </summary>
            <param name="lockObject">要锁定的一或多个对象</param>
        </member>
        <member name="M:Agebull.Common.Frame.ThreadLockScope.OnDispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="T:Agebull.Common.Text.MulitStringDictionary">
            <summary>
              多文本的一个集合
            </summary>
        </member>
        <member name="M:Agebull.Common.Text.MulitStringDictionary.#ctor">
            <summary>
              构造
            </summary>
        </member>
        <member name="P:Agebull.Common.Text.MulitStringDictionary.Global">
            <summary>
              全局文本(空或空白键的文本)
            </summary>
        </member>
        <member name="M:Agebull.Common.Text.MulitStringDictionary.Add(System.String,System.String)">
            <summary>
              加入
            </summary>
            <param name="name"> </param>
            <param name="value"> </param>
        </member>
        <member name="P:Agebull.Common.Text.MulitStringDictionary.Item(System.String)">
            <summary>
              得到文本(列表已组合)
            </summary>
            <param name="name"> </param>
            <returns> </returns>
        </member>
        <member name="M:Agebull.Common.Text.MulitStringDictionary.ToString">
            <summary>
              返回文本
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Agebull.EntityModel.Common.DependencyObjects">
            <summary>
                对象依赖字典
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.Common.DependencyObjects.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.DependencyObjects.Remove``1">
            <summary>
                删除一种类型对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.DependencyObjects.Annex``1(``0)">
            <summary>
                附加一种类型对象
            </summary>
            <remarks>
                这种方法只存在一个,即多次附加,只存最后一个对象
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.Common.DependencyObjects.TryAnnex``1(``0)">
            <summary>
                附加一种类型对象
            </summary>
            <remarks>
                这种方法只存在一个,即多次附加,只存最后一个对象
            </remarks>
        </member>
        <member name="M:Agebull.EntityModel.Common.DependencyObjects.AutoDependency``1">
            <summary>
                取得一种类型的扩展属性(可以自动构造或提前附加)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.DependencyObjects.TryGetDependency``1(System.Func{``0})">
            <summary>
                取得一种类型的扩展属性(需要附加)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.DependencyObjects.Dependency``1">
            <summary>
                取得一种类型的扩展属性(需要附加)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.DependencyObjects.Dependency``1(System.Func{``0})">
            <summary>
                取得一种类型的扩展属性(需要附加)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agebull.EntityModel.Common.NameValue`2">
            <summary>
                名称内容对象
            </summary>
            <typeparam name="TName"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Agebull.EntityModel.Common.NameValue`2.Name">
            <summary>
                名称
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.Common.NameValue`2.Value">
            <summary>
                值
            </summary>
        </member>
        <member name="T:Agebull.EntityModel.Common.NameValue`1">
            <summary>
                名称内容对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.NameValue`1.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.NameValue`1.#ctor(System.String,`0)">
            <summary>
                构造
            </summary>
            <param name="n"></param>
            <param name="v"></param>
        </member>
        <member name="T:Agebull.EntityModel.Common.NameValue">
            <summary>
                名称内容对象
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.NameValue.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.NameValue.#ctor(System.String,System.Object)">
            <summary>
                构造
            </summary>
            <param name="n"></param>
            <param name="v"></param>
        </member>
        <member name="T:Agebull.EntityModel.Common.CommonExtend">
            <summary>
                公共方法的一些扩展
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.CommonExtend.ToDecimal(System.String,System.Decimal)">
            <summary>
                正确安全的转为小数
            </summary>
            <param name="str">文本对象</param>
            <param name="def">无法转换时的缺省值</param>
            <returns>小数</returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.CommonExtend.ToInteger(System.String,System.Int32)">
            <summary>
                正确安全的转为整数
            </summary>
            <param name="str">文本对象</param>
            <param name="def">无法转换时的缺省值</param>
            <returns>整数</returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.CommonExtend.ToIntegers(System.String)">
            <summary>
                正确安全的转为整数数组
            </summary>
            <param name="str">文本对象(数字以,分开)</param>
            <returns>整数数组</returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.CommonExtend.ToSafeString(System.Object,System.String)">
            <summary>
                正确安全的转为文本
            </summary>
            <param name="obj">对象</param>
            <param name="def">无法转换时的缺省值</param>
            <returns>文本</returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.CommonExtend.GetEnumValAndDescList(System.Enum)">
            <summary>
            获取枚举类型的值和描述集合
            </summary>
            <param name="enumObj">目标枚举对象</param>
            <returns>值和描述的集合</returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.CommonExtend.GetEnumValDesc(System.Enum,System.Object)">
            <summary>
            获取特定枚举值的描述
            </summary>
            <param name="enumObj">目标枚举对象</param>
            <param name="val">枚举值</param>
            <returns>枚举值的描述</returns>
        </member>
        <member name="T:Agebull.EntityModel.Common.MemoryCacheData`1">
            <summary>
            内存数据
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Agebull.EntityModel.Common.MemoryCacheData`1.Logger">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.Common.MemoryCacheData`1.ExpirationSecond">
            <summary>
            过期时长
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.Common.MemoryCacheData`1.TimeoutSecond">
            <summary>
            过期时长
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.Common.MemoryCacheData`1.RetryWaitSecond">
            <summary>
            重试等待时长
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.Common.MemoryCacheData`1.MaxTryCount">
            <summary>
            最大重试次数
            </summary>
        </member>
        <member name="P:Agebull.EntityModel.Common.MemoryCacheData`1.Data">
            <summary>
            内存数据
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.Common.MemoryCacheData`1.waitTasks">
            <summary>
            载入过程的等待任务
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.Common.MemoryCacheData`1.expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.MemoryCacheData`1.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.MemoryCacheData`1.LoadData">
            <summary>
            载入数据
            </summary>
            <returns></returns>
        </member>
        <member name="F:Agebull.EntityModel.Common.MemoryCacheData`1.tryCount">
            <summary>
            异常重试次数
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.MemoryCacheData`1.LoadInner">
            <summary>
            读取策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.MemoryCacheData`1.DoLoad">
            <summary>
            读取
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agebull.EntityModel.Common.Number46">
            <summary>
            46位数字
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.Number46.To46(System.Int32)">
            <summary>
            转为46进制
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Agebull.EntityModel.Common.Number46.Dec46(System.Int32,System.Text.StringBuilder)">
            <summary>
            取余
            </summary>
            <param name="num"></param>
            <param name="code"></param>
        </member>
        <member name="M:Agebull.EntityModel.Common.Number46.From46(System.String)">
            <summary>
            转为46进制
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Agebull.EntityModel.Common.RandomOperate">
            <summary>
            随机字符串生成器
            </summary>
        </member>
        <member name="T:Agebull.EntityModel.Common.RandomCode">
            <summary>
            随机字符串生成器
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.Common.RandomCode._baseTicks">
            <summary>
            基准数字
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.RandomCode.#cctor">
            <summary>
            内部构造
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.RandomCode.#ctor">
            <summary>
            内部构造
            </summary>
        </member>
        <member name="F:Agebull.EntityModel.Common.RandomCode._keys">
            <summary>
            字符
            </summary>
        </member>
        <member name="M:Agebull.EntityModel.Common.RandomCode.Generate(System.Int32)">
            <summary>
            随机生成字符串（数字和字母混和）
            </summary>
            <param name="codeCount"></param>
            <returns></returns>
        </member>
    </members>
</doc>
